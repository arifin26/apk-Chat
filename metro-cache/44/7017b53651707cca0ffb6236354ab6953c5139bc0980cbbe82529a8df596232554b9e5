{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var TextExtraction = function () {\n    function TextExtraction(text, patterns) {\n      (0, _classCallCheck2.default)(this, TextExtraction);\n      this.text = text;\n      this.patterns = patterns || [];\n    }\n\n    (0, _createClass2.default)(TextExtraction, [{\n      key: \"parse\",\n      value: function parse() {\n        var _this = this;\n\n        var parsedTexts = [{\n          children: this.text\n        }];\n        this.patterns.forEach(function (pattern) {\n          var newParts = [];\n          parsedTexts.forEach(function (parsedText) {\n            if (parsedText._matched) {\n              newParts.push(parsedText);\n              return;\n            }\n\n            var parts = [];\n            var textLeft = parsedText.children;\n            var indexOfMatchedString = 0;\n\n            while (textLeft) {\n              var matches = pattern.pattern.exec(textLeft);\n\n              if (!matches) {\n                break;\n              }\n\n              var previousText = textLeft.substr(0, matches.index);\n              indexOfMatchedString += matches.index;\n              parts.push({\n                children: previousText\n              });\n              parts.push(_this.getMatchedPart(pattern, matches[0], matches, indexOfMatchedString));\n              textLeft = textLeft.substr(matches.index + matches[0].length);\n              indexOfMatchedString += matches[0].length;\n            }\n\n            parts.push({\n              children: textLeft\n            });\n            newParts.push.apply(newParts, parts);\n          });\n          parsedTexts = newParts;\n        });\n        parsedTexts.forEach(function (parsedText) {\n          return delete parsedText._matched;\n        });\n        return parsedTexts.filter(function (t) {\n          return !!t.children;\n        });\n      }\n    }, {\n      key: \"getMatchedPart\",\n      value: function getMatchedPart(matchedPattern, text, matches, index) {\n        var props = {};\n        Object.keys(matchedPattern).forEach(function (key) {\n          if (key === 'pattern' || key === 'renderText') {\n            return;\n          }\n\n          if (typeof matchedPattern[key] === 'function') {\n            props[key] = function () {\n              return matchedPattern[key](text, index);\n            };\n          } else {\n            props[key] = matchedPattern[key];\n          }\n        });\n        var children = text;\n\n        if (matchedPattern.renderText && typeof matchedPattern.renderText === 'function') {\n          children = matchedPattern.renderText(text, matches);\n        }\n\n        return _objectSpread({}, props, {\n          children: children,\n          _matched: true\n        });\n      }\n    }]);\n    return TextExtraction;\n  }();\n\n  var _default = TextExtraction;\n  exports.default = _default;\n});","lineCount":111,"map":[[19,6,1,6,"TextExtraction"],[19,20],[20,0,8,2],[20,28,8,14,"text"],[20,32,8,2],[20,34,8,20,"patterns"],[20,42,8,2],[20,44,8,30],[21,0,8,30],[22,0,9,4],[22,11,9,9,"text"],[22,15,9,4],[22,18,9,20,"text"],[22,22,9,4],[23,0,10,4],[23,11,10,9,"patterns"],[23,19,10,4],[23,22,10,20,"patterns"],[23,30,10,28],[23,34,10,32],[23,36,10,4],[24,0,11,3],[28,30,17,10],[29,0,17,10],[31,0,18,4],[31,12,18,8,"parsedTexts"],[31,23,18,19],[31,26,18,22],[31,27,18,23],[32,0,18,24,"children"],[32,10,18,24,"children"],[32,18,18,32],[32,20,18,34],[32,25,18,39,"text"],[33,0,18,23],[33,9,18,22],[33,10,18,4],[34,0,19,4],[34,13,19,9,"patterns"],[34,21,19,4],[34,22,19,18,"forEach"],[34,29,19,4],[34,30,19,26],[34,40,19,27,"pattern"],[34,47,19,26],[34,49,19,39],[35,0,20,6],[35,14,20,10,"newParts"],[35,22,20,18],[35,25,20,21],[35,27,20,6],[36,0,22,6,"parsedTexts"],[36,10,22,6,"parsedTexts"],[36,21,22,17],[36,22,22,18,"forEach"],[36,29,22,6],[36,30,22,26],[36,40,22,27,"parsedText"],[36,50,22,26],[36,52,22,42],[37,0,24,8],[37,16,24,12,"parsedText"],[37,26,24,22],[37,27,24,23,"_matched"],[37,35,24,8],[37,37,24,33],[38,0,25,10,"newParts"],[38,14,25,10,"newParts"],[38,22,25,18],[38,23,25,19,"push"],[38,27,25,10],[38,28,25,24,"parsedText"],[38,38,25,10],[39,0,27,10],[40,0,28,9],[42,0,30,8],[42,16,30,12,"parts"],[42,21,30,17],[42,24,30,23],[42,26,30,8],[43,0,31,8],[43,16,31,12,"textLeft"],[43,24,31,20],[43,27,31,23,"parsedText"],[43,37,31,33],[43,38,31,34,"children"],[43,46,31,8],[44,0,32,8],[44,16,32,12,"indexOfMatchedString"],[44,36,32,32],[44,39,32,35],[44,40,32,8],[46,0,34,8],[46,19,34,15,"textLeft"],[46,27,34,8],[46,29,34,25],[47,0,35,10],[47,18,35,14,"matches"],[47,25,35,21],[47,28,35,24,"pattern"],[47,35,35,31],[47,36,35,32,"pattern"],[47,43,35,24],[47,44,35,40,"exec"],[47,48,35,24],[47,49,35,45,"textLeft"],[47,57,35,24],[47,58,35,10],[49,0,37,10],[49,18,37,14],[49,19,37,15,"matches"],[49,26,37,10],[49,28,37,24],[50,0,37,26],[51,0,37,34],[53,0,39,10],[53,18,39,14,"previousText"],[53,30,39,26],[53,33,39,29,"textLeft"],[53,41,39,37],[53,42,39,38,"substr"],[53,48,39,29],[53,49,39,45],[53,50,39,29],[53,52,39,48,"matches"],[53,59,39,55],[53,60,39,56,"index"],[53,65,39,29],[53,66,39,10],[54,0,40,10,"indexOfMatchedString"],[54,14,40,10,"indexOfMatchedString"],[54,34,40,30],[54,38,40,34,"matches"],[54,45,40,41],[54,46,40,42,"index"],[54,51,40,10],[55,0,42,10,"parts"],[55,14,42,10,"parts"],[55,19,42,15],[55,20,42,16,"push"],[55,24,42,10],[55,25,42,21],[56,0,42,22,"children"],[56,16,42,22,"children"],[56,24,42,30],[56,26,42,32,"previousText"],[57,0,42,21],[57,15,42,10],[58,0,44,10,"parts"],[58,14,44,10,"parts"],[58,19,44,15],[58,20,44,16,"push"],[58,24,44,10],[58,25,44,21],[58,30,44,25],[58,31,44,26,"getMatchedPart"],[58,45,44,21],[58,46,44,41,"pattern"],[58,53,44,21],[58,55,44,50,"matches"],[58,62,44,57],[58,63,44,58],[58,64,44,57],[58,65,44,21],[58,67,44,62,"matches"],[58,74,44,21],[58,76,44,71,"indexOfMatchedString"],[58,96,44,21],[58,97,44,10],[59,0,46,10,"textLeft"],[59,14,46,10,"textLeft"],[59,22,46,18],[59,25,46,21,"textLeft"],[59,33,46,29],[59,34,46,30,"substr"],[59,40,46,21],[59,41,46,37,"matches"],[59,48,46,44],[59,49,46,45,"index"],[59,54,46,37],[59,57,46,53,"matches"],[59,64,46,60],[59,65,46,61],[59,66,46,60],[59,67,46,53],[59,68,46,64,"length"],[59,74,46,21],[59,75,46,10],[60,0,47,10,"indexOfMatchedString"],[60,14,47,10,"indexOfMatchedString"],[60,34,47,30],[60,38,47,34,"matches"],[60,45,47,41],[60,46,47,42],[60,47,47,41],[60,48,47,34],[60,49,47,45,"length"],[60,55,47,10],[61,0,48,9],[63,0,50,8,"parts"],[63,12,50,8,"parts"],[63,17,50,13],[63,18,50,14,"push"],[63,22,50,8],[63,23,50,19],[64,0,50,20,"children"],[64,14,50,20,"children"],[64,22,50,28],[64,24,50,30,"textLeft"],[65,0,50,19],[65,13,50,8],[66,0,52,8,"newParts"],[66,12,52,8,"newParts"],[66,20,52,16],[66,21,52,17,"push"],[66,25,52,8],[66,32,52,8,"newParts"],[66,40,52,16],[66,42,52,25,"parts"],[66,47,52,16],[66,48,52,8],[67,0,53,7],[67,11,22,6],[68,0,55,6,"parsedTexts"],[68,10,55,6,"parsedTexts"],[68,21,55,17],[68,24,55,20,"newParts"],[68,32,55,6],[69,0,56,5],[69,9,19,4],[70,0,59,4,"parsedTexts"],[70,8,59,4,"parsedTexts"],[70,19,59,15],[70,20,59,16,"forEach"],[70,27,59,4],[70,28,59,24],[70,38,59,25,"parsedText"],[70,48,59,24],[71,0,59,24],[71,17,59,40],[71,24,59,47,"parsedText"],[71,34,59,57],[71,35,59,58,"_matched"],[71,43,59,24],[72,0,59,24],[72,9,59,4],[73,0,61,4],[73,15,61,11,"parsedTexts"],[73,26,61,22],[73,27,61,23,"filter"],[73,33,61,11],[73,34,61,30],[73,44,61,30,"t"],[73,45,61,31],[74,0,61,31],[74,17,61,35],[74,18,61,36],[74,19,61,37,"t"],[74,20,61,38],[74,21,61,39,"children"],[74,29,61,31],[75,0,61,31],[75,9,61,11],[75,10,61,4],[76,0,62,3],[79,37,74,17,"matchedPattern"],[79,51],[79,53,74,33,"text"],[79,57],[79,59,74,39,"matches"],[79,66],[79,68,74,48,"index"],[79,73],[79,75,74,55],[80,0,75,4],[80,12,75,8,"props"],[80,17,75,13],[80,20,75,16],[80,22,75,4],[81,0,77,4,"Object"],[81,8,77,4,"Object"],[81,14,77,10],[81,15,77,11,"keys"],[81,19,77,4],[81,20,77,16,"matchedPattern"],[81,34,77,4],[81,36,77,32,"forEach"],[81,43,77,4],[81,44,77,40],[81,54,77,41,"key"],[81,57,77,40],[81,59,77,49],[82,0,78,6],[82,14,78,10,"key"],[82,17,78,13],[82,22,78,18],[82,31,78,10],[82,35,78,31,"key"],[82,38,78,34],[82,43,78,39],[82,55,78,6],[82,57,78,53],[83,0,78,55],[84,0,78,64],[86,0,80,6],[86,14,80,10],[86,21,80,17,"matchedPattern"],[86,35,80,31],[86,36,80,32,"key"],[86,39,80,31],[86,40,80,10],[86,45,80,41],[86,55,80,6],[86,57,80,53],[87,0,81,8,"props"],[87,12,81,8,"props"],[87,17,81,13],[87,18,81,14,"key"],[87,21,81,13],[87,22,81,8],[87,25,81,21],[88,0,81,21],[88,21,81,27,"matchedPattern"],[88,35,81,41],[88,36,81,42,"key"],[88,39,81,41],[88,40,81,27],[88,41,81,47,"text"],[88,45,81,27],[88,47,81,53,"index"],[88,52,81,27],[88,53,81,21],[89,0,81,21],[89,13,81,8],[90,0,82,7],[90,11,80,6],[90,17,82,13],[91,0,83,8,"props"],[91,12,83,8,"props"],[91,17,83,13],[91,18,83,14,"key"],[91,21,83,13],[91,22,83,8],[91,25,83,21,"matchedPattern"],[91,39,83,35],[91,40,83,36,"key"],[91,43,83,35],[91,44,83,8],[92,0,84,7],[93,0,85,5],[93,9,77,4],[94,0,87,4],[94,12,87,8,"children"],[94,20,87,16],[94,23,87,19,"text"],[94,27,87,4],[96,0,88,4],[96,12,88,8,"matchedPattern"],[96,26,88,22],[96,27,88,23,"renderText"],[96,37,88,8],[96,41,88,37],[96,48,88,44,"matchedPattern"],[96,62,88,58],[96,63,88,59,"renderText"],[96,73,88,37],[96,78,88,74],[96,88,88,4],[96,90,88,86],[97,0,89,6,"children"],[97,10,89,6,"children"],[97,18,89,14],[97,21,89,17,"matchedPattern"],[97,35,89,31],[97,36,89,32,"renderText"],[97,46,89,17],[97,47,89,43,"text"],[97,51,89,17],[97,53,89,49,"matches"],[97,60,89,17],[97,61,89,6],[98,0,90,5],[100,0,92,4],[100,33,93,9,"props"],[100,38,92,4],[101,0,94,6,"children"],[101,10,94,6,"children"],[101,18,94,14],[101,20,94,16,"children"],[101,28,92,4],[102,0,95,6,"_matched"],[102,10,95,6,"_matched"],[102,18,95,14],[102,20,95,16],[103,0,92,4],[104,0,97,3],[109,17,100,15,"TextExtraction"],[109,31]],"functionMap":{"names":["TextExtraction","constructor","parse","patterns.forEach$argument_0","parsedTexts.forEach$argument_0","parsedTexts.filter$argument_0","getMatchedPart","Object.keys.forEach$argument_0","props.key","<global>"],"mappings":"AAA;ECO;GDG;EEM;0BCE;0BCG;OD+B;KDG;wBEG,2CF;8BGE,iBH;GFC;EMY;wCCG;qBCI,sCD;KDI;GNY;CSC"}},"type":"js/module"}]}