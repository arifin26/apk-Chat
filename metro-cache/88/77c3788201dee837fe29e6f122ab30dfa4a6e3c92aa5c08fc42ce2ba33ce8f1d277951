{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  (function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n      define([], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n      module.exports = factory();\n    } else {\n      global.CBOR = factory();\n    }\n  })(this, function () {\n    var CBOR = function () {\n      function BinaryHex(hex) {\n        this.$hex = hex;\n      }\n\n      BinaryHex.prototype = {\n        length: function length() {\n          return this.$hex.length / 2;\n        },\n        toString: function toString(format) {\n          if (!format || format === 'hex' || format === 16) return this.$hex;\n\n          if (format === 'utf-8') {\n            var encoded = '';\n\n            for (var i = 0; i < this.$hex.length; i += 2) {\n              encoded += '%' + this.$hex.substring(i, i + 2);\n            }\n\n            return decodeURIComponent(encoded);\n          }\n\n          if (format === 'latin') {\n            var encoded = [];\n\n            for (var i = 0; i < this.$hex.length; i += 2) {\n              encoded.push(parseInt(this.$hex.substring(i, i + 2), 16));\n            }\n\n            return String.fromCharCode.apply(String, encoded);\n          }\n\n          throw new Error('Unrecognised format: ' + format);\n        }\n      };\n\n      BinaryHex.fromLatinString = function (latinString) {\n        var hex = '';\n\n        for (var i = 0; i < latinString.length; i++) {\n          var pair = latinString.charCodeAt(i).toString(16);\n          if (pair.length === 1) pair = \"0\" + pair;\n          hex += pair;\n        }\n\n        return new BinaryHex(hex);\n      };\n\n      BinaryHex.fromUtf8String = function (utf8String) {\n        var encoded = encodeURIComponent(utf8String);\n        var hex = '';\n\n        for (var i = 0; i < encoded.length; i++) {\n          if (encoded.charAt(i) === '%') {\n            hex += encoded.substring(i + 1, i + 3);\n            i += 2;\n          } else {\n            var hexPair = encoded.charCodeAt(i).toString(16);\n            if (hexPair.length < 2) hexPair = \"0\" + hexPair;\n            hex += hexPair;\n          }\n        }\n\n        return new BinaryHex(hex);\n      };\n\n      var semanticEncoders = [];\n      var semanticDecoders = {};\n\n      var notImplemented = function notImplemented(label) {\n        return function () {\n          throw new Error(label + ' not implemented');\n        };\n      };\n\n      function Reader() {}\n\n      Reader.prototype = {\n        peekByte: notImplemented('peekByte'),\n        readByte: notImplemented('readByte'),\n        readChunk: notImplemented('readChunk'),\n        readFloat16: function readFloat16() {\n          var half = this.readUint16();\n          var exponent = (half & 0x7fff) >> 10;\n          var mantissa = half & 0x3ff;\n          var negative = half & 0x8000;\n\n          if (exponent === 0x1f) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n\n            return NaN;\n          }\n\n          var magnitude = exponent ? Math.pow(2, exponent - 25) * (1024 + mantissa) : Math.pow(2, -24) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readFloat32: function readFloat32() {\n          var intValue = this.readUint32();\n          var exponent = (intValue & 0x7fffffff) >> 23;\n          var mantissa = intValue & 0x7fffff;\n          var negative = intValue & 0x80000000;\n\n          if (exponent === 0xff) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n\n            return NaN;\n          }\n\n          var magnitude = exponent ? Math.pow(2, exponent - 23 - 127) * (8388608 + mantissa) : Math.pow(2, -23 - 126) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readFloat64: function readFloat64() {\n          var int1 = this.readUint32(),\n              int2 = this.readUint32();\n          var exponent = int1 >> 20 & 0x7ff;\n          var mantissa = (int1 & 0xfffff) * 4294967296 + int2;\n          var negative = int1 & 0x80000000;\n\n          if (exponent === 0x7ff) {\n            if (mantissa === 0) {\n              return negative ? -Infinity : Infinity;\n            }\n\n            return NaN;\n          }\n\n          var magnitude = exponent ? Math.pow(2, exponent - 52 - 1023) * (4503599627370496 + mantissa) : Math.pow(2, -52 - 1022) * mantissa;\n          return negative ? -magnitude : magnitude;\n        },\n        readUint16: function readUint16() {\n          return this.readByte() * 256 + this.readByte();\n        },\n        readUint32: function readUint32() {\n          return this.readUint16() * 65536 + this.readUint16();\n        },\n        readUint64: function readUint64() {\n          return this.readUint32() * 4294967296 + this.readUint32();\n        }\n      };\n\n      function Writer() {}\n\n      Writer.prototype = {\n        writeByte: notImplemented('writeByte'),\n        result: notImplemented('result'),\n        writeFloat16: notImplemented('writeFloat16'),\n        writeFloat32: notImplemented('writeFloat32'),\n        writeFloat64: notImplemented('writeFloat64'),\n        writeUint16: function writeUint16(value) {\n          this.writeByte(value >> 8 & 0xff);\n          this.writeByte(value & 0xff);\n        },\n        writeUint32: function writeUint32(value) {\n          this.writeUint16(value >> 16 & 0xffff);\n          this.writeUint16(value & 0xffff);\n        },\n        writeUint64: function writeUint64(value) {\n          if (value >= 9007199254740992 || value <= -9007199254740992) {\n            throw new Error('Cannot encode Uint64 of: ' + value + ' magnitude to big (floating point errors)');\n          }\n\n          this.writeUint32(Math.floor(value / 4294967296));\n          this.writeUint32(value % 4294967296);\n        },\n        writeString: notImplemented('writeString'),\n        canWriteBinary: function canWriteBinary(chunk) {\n          return false;\n        },\n        writeBinary: notImplemented('writeChunk')\n      };\n\n      function readHeaderRaw(reader) {\n        var firstByte = reader.readByte();\n        var majorType = firstByte >> 5,\n            value = firstByte & 0x1f;\n        return {\n          type: majorType,\n          value: value\n        };\n      }\n\n      function valueFromHeader(header, reader) {\n        var value = header.value;\n\n        if (value < 24) {\n          return value;\n        } else if (value == 24) {\n          return reader.readByte();\n        } else if (value == 25) {\n          return reader.readUint16();\n        } else if (value == 26) {\n          return reader.readUint32();\n        } else if (value == 27) {\n          return reader.readUint64();\n        } else if (value == 31) {\n          return null;\n        }\n\n        notImplemented('Additional info: ' + value)();\n      }\n\n      function writeHeaderRaw(type, value, writer) {\n        writer.writeByte(type << 5 | value);\n      }\n\n      function writeHeader(type, value, writer) {\n        var firstByte = type << 5;\n\n        if (value < 24) {\n          writer.writeByte(firstByte | value);\n        } else if (value < 256) {\n          writer.writeByte(firstByte | 24);\n          writer.writeByte(value);\n        } else if (value < 65536) {\n          writer.writeByte(firstByte | 25);\n          writer.writeUint16(value);\n        } else if (value < 4294967296) {\n          writer.writeByte(firstByte | 26);\n          writer.writeUint32(value);\n        } else {\n          writer.writeByte(firstByte | 27);\n          writer.writeUint64(value);\n        }\n      }\n\n      var stopCode = new Error();\n\n      function decodeReader(reader) {\n        var header = readHeaderRaw(reader);\n\n        switch (header.type) {\n          case 0:\n            return valueFromHeader(header, reader);\n\n          case 1:\n            return -1 - valueFromHeader(header, reader);\n\n          case 2:\n            return reader.readChunk(valueFromHeader(header, reader));\n\n          case 3:\n            var buffer = reader.readChunk(valueFromHeader(header, reader));\n            return buffer.toString('utf-8');\n\n          case 4:\n          case 5:\n            var arrayLength = valueFromHeader(header, reader);\n            var result = [];\n\n            if (arrayLength !== null) {\n              if (header.type === 5) {\n                arrayLength *= 2;\n              }\n\n              for (var i = 0; i < arrayLength; i++) {\n                result[i] = decodeReader(reader);\n              }\n            } else {\n              var item;\n\n              while ((item = decodeReader(reader)) !== stopCode) {\n                result.push(item);\n              }\n            }\n\n            if (header.type === 5) {\n              var objResult = {};\n\n              for (var i = 0; i < result.length; i += 2) {\n                objResult[result[i]] = result[i + 1];\n              }\n\n              return objResult;\n            } else {\n              return result;\n            }\n\n          case 6:\n            var tag = valueFromHeader(header, reader);\n            var decoder = semanticDecoders[tag];\n            var result = decodeReader(reader);\n            return decoder ? decoder(result) : result;\n\n          case 7:\n            if (header.value === 25) {\n              return reader.readFloat16();\n            } else if (header.value === 26) {\n              return reader.readFloat32();\n            } else if (header.value === 27) {\n              return reader.readFloat64();\n            }\n\n            switch (valueFromHeader(header, reader)) {\n              case 20:\n                return false;\n\n              case 21:\n                return true;\n\n              case 22:\n                return null;\n\n              case 23:\n                return undefined;\n\n              case null:\n                return stopCode;\n\n              default:\n                throw new Error('Unknown fixed value: ' + header.value);\n            }\n\n          default:\n            throw new Error('Unsupported header: ' + JSON.stringify(header));\n        }\n\n        throw new Error('not implemented yet');\n      }\n\n      function encodeWriter(data, writer) {\n        for (var i = 0; i < semanticEncoders.length; i++) {\n          var replacement = semanticEncoders[i].fn(data);\n\n          if (replacement !== undefined) {\n            writeHeader(6, semanticEncoders[i].tag, writer);\n            return encodeWriter(replacement, writer);\n          }\n        }\n\n        if (data && typeof data.toCBOR === 'function') {\n          data = data.toCBOR();\n        }\n\n        if (data === false) {\n          writeHeader(7, 20, writer);\n        } else if (data === true) {\n          writeHeader(7, 21, writer);\n        } else if (data === null) {\n          writeHeader(7, 22, writer);\n        } else if (data === undefined) {\n          writeHeader(7, 23, writer);\n        } else if (typeof data === 'number') {\n          if (Math.floor(data) === data && data < 9007199254740992 && data > -9007199254740992) {\n            if (data < 0) {\n              writeHeader(1, -1 - data, writer);\n            } else {\n              writeHeader(0, data, writer);\n            }\n          } else {\n            writeHeaderRaw(7, 27, writer);\n            writer.writeFloat64(data);\n          }\n        } else if (typeof data === 'string') {\n          writer.writeString(data, function (length) {\n            writeHeader(3, length, writer);\n          });\n        } else if (writer.canWriteBinary(data)) {\n          writer.writeBinary(data, function (length) {\n            writeHeader(2, length, writer);\n          });\n        } else if (typeof data === 'object') {\n          if (api.config.useToJSON && typeof data.toJSON === 'function') {\n            data = data.toJSON();\n          }\n\n          if (Array.isArray(data)) {\n            writeHeader(4, data.length, writer);\n\n            for (var i = 0; i < data.length; i++) {\n              encodeWriter(data[i], writer);\n            }\n          } else {\n            var keys = Object.keys(data);\n            writeHeader(5, keys.length, writer);\n\n            for (var i = 0; i < keys.length; i++) {\n              encodeWriter(keys[i], writer);\n              encodeWriter(data[keys[i]], writer);\n            }\n          }\n        } else {\n          throw new Error('CBOR encoding not supported: ' + data);\n        }\n      }\n\n      var readerFunctions = [];\n      var writerFunctions = [];\n      var api = {\n        config: {\n          useToJSON: true\n        },\n        addWriter: function addWriter(format, writerFunction) {\n          if (typeof format === 'string') {\n            writerFunctions.push(function (f) {\n              if (format === f) return writerFunction(f);\n            });\n          } else {\n            writerFunctions.push(format);\n          }\n        },\n        addReader: function addReader(format, readerFunction) {\n          if (typeof format === 'string') {\n            readerFunctions.push(function (data, f) {\n              if (format === f) return readerFunction(data, f);\n            });\n          } else {\n            readerFunctions.push(format);\n          }\n        },\n        encode: function encode(data, format) {\n          for (var i = 0; i < writerFunctions.length; i++) {\n            var func = writerFunctions[i];\n            var writer = func(format);\n\n            if (writer) {\n              encodeWriter(data, writer);\n              return writer.result();\n            }\n          }\n\n          throw new Error('Unsupported output format: ' + format);\n        },\n        decode: function decode(data, format) {\n          for (var i = 0; i < readerFunctions.length; i++) {\n            var func = readerFunctions[i];\n            var reader = func(data, format);\n\n            if (reader) {\n              return decodeReader(reader);\n            }\n          }\n\n          throw new Error('Unsupported input format: ' + format);\n        },\n        addSemanticEncode: function addSemanticEncode(tag, fn) {\n          if (typeof tag !== 'number' || tag % 1 !== 0 || tag < 0) {\n            throw new Error('Tag must be a positive integer');\n          }\n\n          semanticEncoders.push({\n            tag: tag,\n            fn: fn\n          });\n          return this;\n        },\n        addSemanticDecode: function addSemanticDecode(tag, fn) {\n          if (typeof tag !== 'number' || tag % 1 !== 0 || tag < 0) {\n            throw new Error('Tag must be a positive integer');\n          }\n\n          semanticDecoders[tag] = fn;\n          return this;\n        },\n        Reader: Reader,\n        Writer: Writer\n      };\n\n      function BufferReader(buffer) {\n        this.buffer = buffer;\n        this.pos = 0;\n      }\n\n      BufferReader.prototype = Object.create(Reader.prototype);\n\n      BufferReader.prototype.peekByte = function () {\n        return this.buffer[this.pos];\n      };\n\n      BufferReader.prototype.readByte = function () {\n        return this.buffer[this.pos++];\n      };\n\n      BufferReader.prototype.readUint16 = function () {\n        var result = this.buffer.readUInt16BE(this.pos);\n        this.pos += 2;\n        return result;\n      };\n\n      BufferReader.prototype.readUint32 = function () {\n        var result = this.buffer.readUInt32BE(this.pos);\n        this.pos += 4;\n        return result;\n      };\n\n      BufferReader.prototype.readFloat32 = function () {\n        var result = this.buffer.readFloatBE(this.pos);\n        this.pos += 4;\n        return result;\n      };\n\n      BufferReader.prototype.readFloat64 = function () {\n        var result = this.buffer.readDoubleBE(this.pos);\n        this.pos += 8;\n        return result;\n      };\n\n      BufferReader.prototype.readChunk = function (length) {\n        var result = Buffer.alloc(length);\n        this.buffer.copy(result, 0, this.pos, this.pos += length);\n        return result;\n      };\n\n      function BufferWriter(stringFormat) {\n        this.byteLength = 0;\n        this.defaultBufferLength = 16384;\n        this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n        this.latestBufferOffset = 0;\n        this.completeBuffers = [];\n        this.stringFormat = stringFormat;\n      }\n\n      BufferWriter.prototype = Object.create(Writer.prototype);\n\n      BufferWriter.prototype.writeByte = function (value) {\n        this.latestBuffer[this.latestBufferOffset++] = value;\n\n        if (this.latestBufferOffset >= this.latestBuffer.length) {\n          this.completeBuffers.push(this.latestBuffer);\n          this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n          this.latestBufferOffset = 0;\n        }\n\n        this.byteLength++;\n      };\n\n      BufferWriter.prototype.writeFloat32 = function (value) {\n        var buffer = Buffer.alloc(4);\n        buffer.writeFloatBE(value, 0);\n        this.writeBuffer(buffer);\n      };\n\n      BufferWriter.prototype.writeFloat64 = function (value) {\n        var buffer = Buffer.alloc(8);\n        buffer.writeDoubleBE(value, 0);\n        this.writeBuffer(buffer);\n      };\n\n      BufferWriter.prototype.writeString = function (string, lengthFunc) {\n        var buffer = Buffer.from(string, 'utf-8');\n        lengthFunc(buffer.length);\n        this.writeBuffer(buffer);\n      };\n\n      BufferWriter.prototype.canWriteBinary = function (data) {\n        return data instanceof Buffer;\n      };\n\n      BufferWriter.prototype.writeBinary = function (buffer, lengthFunc) {\n        lengthFunc(buffer.length);\n        this.writeBuffer(buffer);\n      };\n\n      BufferWriter.prototype.writeBuffer = function (chunk) {\n        if (!(chunk instanceof Buffer)) throw new TypeError('BufferWriter only accepts Buffers');\n\n        if (!this.latestBufferOffset) {\n          this.completeBuffers.push(chunk);\n        } else if (this.latestBuffer.length - this.latestBufferOffset >= chunk.length) {\n          chunk.copy(this.latestBuffer, this.latestBufferOffset);\n          this.latestBufferOffset += chunk.length;\n\n          if (this.latestBufferOffset >= this.latestBuffer.length) {\n            this.completeBuffers.push(this.latestBuffer);\n            this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n            this.latestBufferOffset = 0;\n          }\n        } else {\n          this.completeBuffers.push(this.latestBuffer.slice(0, this.latestBufferOffset));\n          this.completeBuffers.push(chunk);\n          this.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n          this.latestBufferOffset = 0;\n        }\n\n        this.byteLength += chunk.length;\n      };\n\n      BufferWriter.prototype.result = function () {\n        var result = Buffer.alloc(this.byteLength);\n        var offset = 0;\n\n        for (var i = 0; i < this.completeBuffers.length; i++) {\n          var buffer = this.completeBuffers[i];\n          buffer.copy(result, offset, 0, buffer.length);\n          offset += buffer.length;\n        }\n\n        if (this.latestBufferOffset) {\n          this.latestBuffer.copy(result, offset, 0, this.latestBufferOffset);\n        }\n\n        if (this.stringFormat) return result.toString(this.stringFormat);\n        return result;\n      };\n\n      if (typeof Buffer === 'function') {\n        api.addReader(function (data, format) {\n          if (data instanceof Buffer) {\n            return new BufferReader(data);\n          }\n\n          if (format === 'hex' || format === 'base64') {\n            var buffer = Buffer.from(data, format);\n            return new BufferReader(buffer);\n          }\n        });\n        api.addWriter(function (format) {\n          if (!format || format === 'buffer') {\n            return new BufferWriter();\n          } else if (format === 'hex' || format === 'base64') {\n            return new BufferWriter(format);\n          }\n        });\n      }\n\n      function HexReader(hex) {\n        this.hex = hex;\n        this.pos = 0;\n      }\n\n      HexReader.prototype = Object.create(Reader.prototype);\n\n      HexReader.prototype.peekByte = function () {\n        var pair = this.hex.substring(this.pos, 2);\n        return parseInt(pair, 16);\n      };\n\n      HexReader.prototype.readByte = function () {\n        var pair = this.hex.substring(this.pos, this.pos + 2);\n        this.pos += 2;\n        return parseInt(pair, 16);\n      };\n\n      HexReader.prototype.readChunk = function (length) {\n        var hex = this.hex.substring(this.pos, this.pos + length * 2);\n        this.pos += length * 2;\n        if (typeof Buffer === 'function') return Buffer.from(hex, 'hex');\n        return new BinaryHex(hex);\n      };\n\n      function HexWriter(finalFormat) {\n        this.$hex = '';\n        this.finalFormat = finalFormat || 'hex';\n      }\n\n      HexWriter.prototype = Object.create(Writer.prototype);\n\n      HexWriter.prototype.writeByte = function (value) {\n        if (value < 0 || value > 255) throw new Error('Byte value out of range: ' + value);\n        var hex = value.toString(16);\n\n        if (hex.length == 1) {\n          hex = '0' + hex;\n        }\n\n        this.$hex += hex;\n      };\n\n      HexWriter.prototype.canWriteBinary = function (chunk) {\n        return chunk instanceof BinaryHex || typeof Buffer === 'function' && chunk instanceof Buffer;\n      };\n\n      HexWriter.prototype.writeBinary = function (chunk, lengthFunction) {\n        if (chunk instanceof BinaryHex) {\n          lengthFunction(chunk.length());\n          this.$hex += chunk.$hex;\n        } else if (typeof Buffer === 'function' && chunk instanceof Buffer) {\n          lengthFunction(chunk.length);\n          this.$hex += chunk.toString('hex');\n        } else {\n          throw new TypeError('HexWriter only accepts BinaryHex or Buffers');\n        }\n      };\n\n      HexWriter.prototype.result = function () {\n        if (this.finalFormat === 'buffer' && typeof Buffer === 'function') {\n          return Buffer.from(this.$hex, 'hex');\n        }\n\n        return new BinaryHex(this.$hex).toString(this.finalFormat);\n      };\n\n      HexWriter.prototype.writeString = function (string, lengthFunction) {\n        var buffer = BinaryHex.fromUtf8String(string);\n        lengthFunction(buffer.length());\n        this.$hex += buffer.$hex;\n      };\n\n      api.addReader(function (data, format) {\n        if (data instanceof BinaryHex || data.$hex) {\n          return new HexReader(data.$hex);\n        }\n\n        if (format === 'hex') {\n          return new HexReader(data);\n        }\n      });\n      api.addWriter(function (format) {\n        if (format === 'hex') {\n          return new HexWriter();\n        }\n      });\n      return api;\n    }();\n\n    CBOR.addSemanticEncode(0, function (data) {\n      if (data instanceof Date) {\n        return data.toISOString();\n      }\n    }).addSemanticDecode(0, function (isoString) {\n      return new Date(isoString);\n    }).addSemanticDecode(1, function (isoString) {\n      return new Date(isoString);\n    });\n    return CBOR;\n  });\n});","lineCount":730,"map":[[2,0,1,0],[2,3,1,1],[2,13,1,11,"global"],[2,19,1,1],[2,21,1,19,"factory"],[2,28,1,1],[2,30,1,28],[3,0,2,1],[3,8,2,5],[3,15,2,12,"define"],[3,21,2,5],[3,26,2,23],[3,36,2,5],[3,40,2,37,"define"],[3,46,2,43],[3,47,2,44,"amd"],[3,50,2,1],[3,52,2,49],[4,0,3,2,"define"],[4,6,3,2,"define"],[4,12,3,8],[4,13,3,9],[4,15,3,8],[4,17,3,13,"factory"],[4,24,3,8],[4,25,3,2],[5,0,4,2],[5,5,2,1],[5,11,4,8],[5,15,4,12],[5,22,4,19,"module"],[5,28,4,12],[5,33,4,30],[5,44,4,12],[5,48,4,45,"module"],[5,54,4,51],[5,55,4,52,"exports"],[5,62,4,8],[5,64,4,60],[6,0,5,2,"module"],[6,6,5,2,"module"],[6,12,5,8],[6,13,5,9,"exports"],[6,20,5,2],[6,23,5,19,"factory"],[6,30,5,26],[6,32,5,2],[7,0,6,2],[7,5,4,8],[7,11,6,8],[8,0,7,2,"global"],[8,6,7,2,"global"],[8,12,7,8],[8,13,7,9,"CBOR"],[8,17,7,2],[8,20,7,16,"factory"],[8,27,7,23],[8,29,7,2],[9,0,8,2],[10,0,9,1],[10,3,1,0],[10,5,9,3],[10,9,1,0],[10,11,9,9],[10,23,9,21],[11,0,10,1],[11,8,10,5,"CBOR"],[11,12,10,9],[11,15,10,13],[11,27,10,25],[12,0,11,2],[12,15,11,11,"BinaryHex"],[12,24,11,2],[12,25,11,21,"hex"],[12,28,11,2],[12,30,11,26],[13,0,12,3],[13,13,12,8,"$hex"],[13,17,12,3],[13,20,12,15,"hex"],[13,23,12,3],[14,0,13,3],[16,0,14,2,"BinaryHex"],[16,6,14,2,"BinaryHex"],[16,15,14,11],[16,16,14,12,"prototype"],[16,25,14,2],[16,28,14,24],[17,0,15,3,"length"],[17,8,15,3,"length"],[17,14,15,9],[17,16,15,11],[17,34,15,23],[18,0,16,4],[18,17,16,11],[18,22,16,16,"$hex"],[18,26,16,11],[18,27,16,21,"length"],[18,33,16,11],[18,36,16,28],[18,37,16,4],[19,0,17,4],[19,9,14,24],[20,0,18,3,"toString"],[20,8,18,3,"toString"],[20,16,18,11],[20,18,18,13],[20,36,18,23,"format"],[20,42,18,13],[20,44,18,31],[21,0,19,4],[21,14,19,8],[21,15,19,9,"format"],[21,21,19,8],[21,25,19,19,"format"],[21,31,19,25],[21,36,19,30],[21,41,19,8],[21,45,19,39,"format"],[21,51,19,45],[21,56,19,50],[21,58,19,4],[21,60,19,54],[21,67,19,61],[21,72,19,66,"$hex"],[21,76,19,54],[23,0,20,4],[23,14,20,8,"format"],[23,20,20,14],[23,25,20,19],[23,32,20,4],[23,34,20,28],[24,0,21,5],[24,16,21,9,"encoded"],[24,23,21,16],[24,26,21,19],[24,28,21,5],[26,0,22,5],[26,17,22,10],[26,21,22,14,"i"],[26,22,22,15],[26,25,22,18],[26,26,22,5],[26,28,22,21,"i"],[26,29,22,22],[26,32,22,25],[26,37,22,30,"$hex"],[26,41,22,25],[26,42,22,35,"length"],[26,48,22,5],[26,50,22,43,"i"],[26,51,22,44],[26,55,22,48],[26,56,22,5],[26,58,22,51],[27,0,23,6,"encoded"],[27,14,23,6,"encoded"],[27,21,23,13],[27,25,23,17],[27,31,23,23],[27,36,23,28,"$hex"],[27,40,23,23],[27,41,23,33,"substring"],[27,50,23,23],[27,51,23,43,"i"],[27,52,23,23],[27,54,23,46,"i"],[27,55,23,47],[27,58,23,50],[27,59,23,23],[27,60,23,6],[28,0,24,6],[30,0,25,5],[30,19,25,12,"decodeURIComponent"],[30,37,25,30],[30,38,25,31,"encoded"],[30,45,25,30],[30,46,25,5],[31,0,26,5],[33,0,27,4],[33,14,27,8,"format"],[33,20,27,14],[33,25,27,19],[33,32,27,4],[33,34,27,28],[34,0,28,5],[34,16,28,9,"encoded"],[34,23,28,16],[34,26,28,19],[34,28,28,5],[36,0,29,5],[36,17,29,10],[36,21,29,14,"i"],[36,22,29,15],[36,25,29,18],[36,26,29,5],[36,28,29,21,"i"],[36,29,29,22],[36,32,29,25],[36,37,29,30,"$hex"],[36,41,29,25],[36,42,29,35,"length"],[36,48,29,5],[36,50,29,43,"i"],[36,51,29,44],[36,55,29,48],[36,56,29,5],[36,58,29,51],[37,0,30,6,"encoded"],[37,14,30,6,"encoded"],[37,21,30,13],[37,22,30,14,"push"],[37,26,30,6],[37,27,30,19,"parseInt"],[37,35,30,27],[37,36,30,28],[37,41,30,33,"$hex"],[37,45,30,28],[37,46,30,38,"substring"],[37,55,30,28],[37,56,30,48,"i"],[37,57,30,28],[37,59,30,51,"i"],[37,60,30,52],[37,63,30,55],[37,64,30,28],[37,65,30,27],[37,67,30,59],[37,69,30,27],[37,70,30,6],[38,0,31,6],[40,0,32,5],[40,19,32,12,"String"],[40,25,32,18],[40,26,32,19,"fromCharCode"],[40,38,32,12],[40,39,32,32,"apply"],[40,44,32,12],[40,45,32,38,"String"],[40,51,32,12],[40,53,32,46,"encoded"],[40,60,32,12],[40,61,32,5],[41,0,33,5],[43,0,34,4],[43,16,34,10],[43,20,34,14,"Error"],[43,25,34,10],[43,26,34,20],[43,52,34,46,"format"],[43,58,34,10],[43,59,34,4],[44,0,35,4],[45,0,14,24],[45,7,14,2],[47,0,37,2,"BinaryHex"],[47,6,37,2,"BinaryHex"],[47,15,37,11],[47,16,37,12,"fromLatinString"],[47,31,37,2],[47,34,37,30],[47,44,37,40,"latinString"],[47,55,37,30],[47,57,37,53],[48,0,38,3],[48,12,38,7,"hex"],[48,15,38,10],[48,18,38,13],[48,20,38,3],[50,0,39,3],[50,13,39,8],[50,17,39,12,"i"],[50,18,39,13],[50,21,39,16],[50,22,39,3],[50,24,39,19,"i"],[50,25,39,20],[50,28,39,23,"latinString"],[50,39,39,34],[50,40,39,35,"length"],[50,46,39,3],[50,48,39,43,"i"],[50,49,39,44],[50,51,39,3],[50,53,39,48],[51,0,40,4],[51,14,40,8,"pair"],[51,18,40,12],[51,21,40,15,"latinString"],[51,32,40,26],[51,33,40,27,"charCodeAt"],[51,43,40,15],[51,44,40,38,"i"],[51,45,40,15],[51,47,40,41,"toString"],[51,55,40,15],[51,56,40,50],[51,58,40,15],[51,59,40,4],[52,0,41,4],[52,14,41,8,"pair"],[52,18,41,12],[52,19,41,13,"length"],[52,25,41,8],[52,30,41,24],[52,31,41,4],[52,33,41,27,"pair"],[52,37,41,31],[52,40,41,34],[52,46,41,40,"pair"],[52,50,41,27],[53,0,42,4,"hex"],[53,10,42,4,"hex"],[53,13,42,7],[53,17,42,11,"pair"],[53,21,42,4],[54,0,43,4],[56,0,44,3],[56,15,44,10],[56,19,44,14,"BinaryHex"],[56,28,44,10],[56,29,44,24,"hex"],[56,32,44,10],[56,33,44,3],[57,0,45,3],[57,7,37,2],[59,0,46,2,"BinaryHex"],[59,6,46,2,"BinaryHex"],[59,15,46,11],[59,16,46,12,"fromUtf8String"],[59,30,46,2],[59,33,46,29],[59,43,46,39,"utf8String"],[59,53,46,29],[59,55,46,51],[60,0,47,3],[60,12,47,7,"encoded"],[60,19,47,14],[60,22,47,17,"encodeURIComponent"],[60,40,47,35],[60,41,47,36,"utf8String"],[60,51,47,35],[60,52,47,3],[61,0,48,3],[61,12,48,7,"hex"],[61,15,48,10],[61,18,48,13],[61,20,48,3],[63,0,49,3],[63,13,49,8],[63,17,49,12,"i"],[63,18,49,13],[63,21,49,16],[63,22,49,3],[63,24,49,19,"i"],[63,25,49,20],[63,28,49,23,"encoded"],[63,35,49,30],[63,36,49,31,"length"],[63,42,49,3],[63,44,49,39,"i"],[63,45,49,40],[63,47,49,3],[63,49,49,44],[64,0,50,4],[64,14,50,8,"encoded"],[64,21,50,15],[64,22,50,16,"charAt"],[64,28,50,8],[64,29,50,23,"i"],[64,30,50,8],[64,36,50,30],[64,39,50,4],[64,41,50,35],[65,0,51,5,"hex"],[65,12,51,5,"hex"],[65,15,51,8],[65,19,51,12,"encoded"],[65,26,51,19],[65,27,51,20,"substring"],[65,36,51,12],[65,37,51,30,"i"],[65,38,51,31],[65,41,51,34],[65,42,51,12],[65,44,51,37,"i"],[65,45,51,38],[65,48,51,41],[65,49,51,12],[65,50,51,5],[66,0,52,5,"i"],[66,12,52,5,"i"],[66,13,52,6],[66,17,52,10],[66,18,52,5],[67,0,53,5],[67,11,50,4],[67,17,53,11],[68,0,54,5],[68,16,54,9,"hexPair"],[68,23,54,16],[68,26,54,19,"encoded"],[68,33,54,26],[68,34,54,27,"charCodeAt"],[68,44,54,19],[68,45,54,38,"i"],[68,46,54,19],[68,48,54,41,"toString"],[68,56,54,19],[68,57,54,50],[68,59,54,19],[68,60,54,5],[69,0,55,5],[69,16,55,9,"hexPair"],[69,23,55,16],[69,24,55,17,"length"],[69,30,55,9],[69,33,55,26],[69,34,55,5],[69,36,55,29,"hexPair"],[69,43,55,36],[69,46,55,39],[69,52,55,45,"hexPair"],[69,59,55,29],[70,0,56,5,"hex"],[70,12,56,5,"hex"],[70,15,56,8],[70,19,56,12,"hexPair"],[70,26,56,5],[71,0,57,5],[72,0,58,4],[74,0,59,3],[74,15,59,10],[74,19,59,14,"BinaryHex"],[74,28,59,10],[74,29,59,24,"hex"],[74,32,59,10],[74,33,59,3],[75,0,60,3],[75,7,46,2],[77,0,62,2],[77,10,62,6,"semanticEncoders"],[77,26,62,22],[77,29,62,25],[77,31,62,2],[78,0,63,2],[78,10,63,6,"semanticDecoders"],[78,26,63,22],[78,29,63,25],[78,31,63,2],[80,0,65,2],[80,10,65,6,"notImplemented"],[80,24,65,20],[80,27,65,23],[80,36,65,6,"notImplemented"],[80,50,65,23],[80,51,65,33,"label"],[80,56,65,23],[80,58,65,40],[81,0,66,3],[81,15,66,10],[81,27,66,22],[82,0,67,4],[82,16,67,10],[82,20,67,14,"Error"],[82,25,67,10],[82,26,67,20,"label"],[82,31,67,25],[82,34,67,28],[82,52,67,10],[82,53,67,4],[83,0,68,4],[83,9,66,3],[84,0,69,3],[84,7,65,2],[86,0,71,2],[86,15,71,11,"Reader"],[86,21,71,2],[86,24,71,20],[86,25,72,3],[88,0,73,2,"Reader"],[88,6,73,2,"Reader"],[88,12,73,8],[88,13,73,9,"prototype"],[88,22,73,2],[88,25,73,21],[89,0,74,3,"peekByte"],[89,8,74,3,"peekByte"],[89,16,74,11],[89,18,74,13,"notImplemented"],[89,32,74,27],[89,33,74,28],[89,43,74,27],[89,44,73,21],[90,0,75,3,"readByte"],[90,8,75,3,"readByte"],[90,16,75,11],[90,18,75,13,"notImplemented"],[90,32,75,27],[90,33,75,28],[90,43,75,27],[90,44,73,21],[91,0,76,3,"readChunk"],[91,8,76,3,"readChunk"],[91,17,76,12],[91,19,76,14,"notImplemented"],[91,33,76,28],[91,34,76,29],[91,45,76,28],[91,46,73,21],[92,0,77,3,"readFloat16"],[92,8,77,3,"readFloat16"],[92,19,77,14],[92,21,77,16],[92,44,77,28],[93,0,78,4],[93,14,78,8,"half"],[93,18,78,12],[93,21,78,15],[93,26,78,20,"readUint16"],[93,36,78,15],[93,38,78,4],[94,0,79,4],[94,14,79,8,"exponent"],[94,22,79,16],[94,25,79,19],[94,26,79,20,"half"],[94,30,79,24],[94,33,79,25],[94,39,79,19],[94,44,79,36],[94,46,79,4],[95,0,80,4],[95,14,80,8,"mantissa"],[95,22,80,16],[95,25,80,19,"half"],[95,29,80,23],[95,32,80,24],[95,37,80,4],[96,0,81,4],[96,14,81,8,"negative"],[96,22,81,16],[96,25,81,19,"half"],[96,29,81,23],[96,32,81,24],[96,38,81,4],[98,0,82,4],[98,14,82,8,"exponent"],[98,22,82,16],[98,27,82,21],[98,31,82,4],[98,33,82,27],[99,0,83,5],[99,16,83,9,"mantissa"],[99,24,83,17],[99,29,83,22],[99,30,83,5],[99,32,83,25],[100,0,84,6],[100,21,84,13,"negative"],[100,29,84,21],[100,32,84,24],[100,33,84,25,"Infinity"],[100,41,84,21],[100,44,84,36,"Infinity"],[100,52,84,6],[101,0,85,6],[103,0,86,5],[103,19,86,12,"NaN"],[103,22,86,5],[104,0,87,5],[106,0,88,4],[106,14,88,8,"magnitude"],[106,23,88,17],[106,26,88,20,"exponent"],[106,34,88,28],[106,37,88,31,"Math"],[106,41,88,35],[106,42,88,36,"pow"],[106,45,88,31],[106,46,88,40],[106,47,88,31],[106,49,88,43,"exponent"],[106,57,88,51],[106,60,88,54],[106,62,88,31],[106,67,88,59],[106,74,88,66,"mantissa"],[106,82,88,31],[106,83,88,28],[106,86,88,78,"Math"],[106,90,88,82],[106,91,88,83,"pow"],[106,94,88,78],[106,95,88,87],[106,96,88,78],[106,98,88,90],[106,99,88,91],[106,101,88,78],[106,105,88,95,"mantissa"],[106,113,88,4],[107,0,89,4],[107,17,89,11,"negative"],[107,25,89,19],[107,28,89,22],[107,29,89,23,"magnitude"],[107,38,89,19],[107,41,89,35,"magnitude"],[107,50,89,4],[108,0,90,4],[108,9,73,21],[109,0,91,3,"readFloat32"],[109,8,91,3,"readFloat32"],[109,19,91,14],[109,21,91,16],[109,44,91,28],[110,0,92,4],[110,14,92,8,"intValue"],[110,22,92,16],[110,25,92,19],[110,30,92,24,"readUint32"],[110,40,92,19],[110,42,92,4],[111,0,93,4],[111,14,93,8,"exponent"],[111,22,93,16],[111,25,93,19],[111,26,93,20,"intValue"],[111,34,93,28],[111,37,93,29],[111,47,93,19],[111,52,93,44],[111,54,93,4],[112,0,94,4],[112,14,94,8,"mantissa"],[112,22,94,16],[112,25,94,19,"intValue"],[112,33,94,27],[112,36,94,28],[112,44,94,4],[113,0,95,4],[113,14,95,8,"negative"],[113,22,95,16],[113,25,95,19,"intValue"],[113,33,95,27],[113,36,95,28],[113,46,95,4],[115,0,96,4],[115,14,96,8,"exponent"],[115,22,96,16],[115,27,96,21],[115,31,96,4],[115,33,96,27],[116,0,97,5],[116,16,97,9,"mantissa"],[116,24,97,17],[116,29,97,22],[116,30,97,5],[116,32,97,25],[117,0,98,6],[117,21,98,13,"negative"],[117,29,98,21],[117,32,98,24],[117,33,98,25,"Infinity"],[117,41,98,21],[117,44,98,36,"Infinity"],[117,52,98,6],[118,0,99,6],[120,0,100,5],[120,19,100,12,"NaN"],[120,22,100,5],[121,0,101,5],[123,0,102,4],[123,14,102,8,"magnitude"],[123,23,102,17],[123,26,102,20,"exponent"],[123,34,102,28],[123,37,102,31,"Math"],[123,41,102,35],[123,42,102,36,"pow"],[123,45,102,31],[123,46,102,40],[123,47,102,31],[123,49,102,43,"exponent"],[123,57,102,51],[123,60,102,54],[123,62,102,43],[123,65,102,59],[123,68,102,31],[123,73,102,65],[123,83,102,75,"mantissa"],[123,91,102,31],[123,92,102,28],[123,95,102,87,"Math"],[123,99,102,91],[123,100,102,92,"pow"],[123,103,102,87],[123,104,102,96],[123,105,102,87],[123,107,102,99],[123,108,102,100],[123,110,102,99],[123,113,102,105],[123,116,102,87],[123,120,102,110,"mantissa"],[123,128,102,4],[124,0,103,4],[124,17,103,11,"negative"],[124,25,103,19],[124,28,103,22],[124,29,103,23,"magnitude"],[124,38,103,19],[124,41,103,35,"magnitude"],[124,50,103,4],[125,0,104,4],[125,9,73,21],[126,0,105,3,"readFloat64"],[126,8,105,3,"readFloat64"],[126,19,105,14],[126,21,105,16],[126,44,105,28],[127,0,106,4],[127,14,106,8,"int1"],[127,18,106,12],[127,21,106,15],[127,26,106,20,"readUint32"],[127,36,106,15],[127,38,106,4],[128,0,106,4],[128,14,106,34,"int2"],[128,18,106,38],[128,21,106,41],[128,26,106,46,"readUint32"],[128,36,106,41],[128,38,106,4],[129,0,107,4],[129,14,107,8,"exponent"],[129,22,107,16],[129,25,107,20,"int1"],[129,29,107,24],[129,33,107,28],[129,35,107,19],[129,38,107,32],[129,43,107,4],[130,0,108,4],[130,14,108,8,"mantissa"],[130,22,108,16],[130,25,108,19],[130,26,108,20,"int1"],[130,30,108,24],[130,33,108,25],[130,40,108,19],[130,44,108,34],[130,54,108,19],[130,57,108,47,"int2"],[130,61,108,4],[131,0,109,4],[131,14,109,8,"negative"],[131,22,109,16],[131,25,109,19,"int1"],[131,29,109,23],[131,32,109,24],[131,42,109,4],[133,0,110,4],[133,14,110,8,"exponent"],[133,22,110,16],[133,27,110,21],[133,32,110,4],[133,34,110,28],[134,0,111,5],[134,16,111,9,"mantissa"],[134,24,111,17],[134,29,111,22],[134,30,111,5],[134,32,111,25],[135,0,112,6],[135,21,112,13,"negative"],[135,29,112,21],[135,32,112,24],[135,33,112,25,"Infinity"],[135,41,112,21],[135,44,112,36,"Infinity"],[135,52,112,6],[136,0,113,6],[138,0,114,5],[138,19,114,12,"NaN"],[138,22,114,5],[139,0,115,5],[141,0,116,4],[141,14,116,8,"magnitude"],[141,23,116,17],[141,26,116,20,"exponent"],[141,34,116,28],[141,37,116,31,"Math"],[141,41,116,35],[141,42,116,36,"pow"],[141,45,116,31],[141,46,116,40],[141,47,116,31],[141,49,116,43,"exponent"],[141,57,116,51],[141,60,116,54],[141,62,116,43],[141,65,116,59],[141,69,116,31],[141,74,116,66],[141,93,116,85,"mantissa"],[141,101,116,31],[141,102,116,28],[141,105,116,97,"Math"],[141,109,116,101],[141,110,116,102,"pow"],[141,113,116,97],[141,114,116,106],[141,115,116,97],[141,117,116,109],[141,118,116,110],[141,120,116,109],[141,123,116,115],[141,127,116,97],[141,131,116,121,"mantissa"],[141,139,116,4],[142,0,117,4],[142,17,117,11,"negative"],[142,25,117,19],[142,28,117,22],[142,29,117,23,"magnitude"],[142,38,117,19],[142,41,117,35,"magnitude"],[142,50,117,4],[143,0,118,4],[143,9,73,21],[144,0,119,3,"readUint16"],[144,8,119,3,"readUint16"],[144,18,119,13],[144,20,119,15],[144,42,119,27],[145,0,120,4],[145,17,120,11],[145,22,120,16,"readByte"],[145,30,120,11],[145,35,120,27],[145,38,120,11],[145,41,120,33],[145,46,120,38,"readByte"],[145,54,120,33],[145,56,120,4],[146,0,121,4],[146,9,73,21],[147,0,122,3,"readUint32"],[147,8,122,3,"readUint32"],[147,18,122,13],[147,20,122,15],[147,42,122,27],[148,0,123,4],[148,17,123,11],[148,22,123,16,"readUint16"],[148,32,123,11],[148,37,123,29],[148,42,123,11],[148,45,123,37],[148,50,123,42,"readUint16"],[148,60,123,37],[148,62,123,4],[149,0,124,4],[149,9,73,21],[150,0,125,3,"readUint64"],[150,8,125,3,"readUint64"],[150,18,125,13],[150,20,125,15],[150,42,125,27],[151,0,126,4],[151,17,126,11],[151,22,126,16,"readUint32"],[151,32,126,11],[151,37,126,29],[151,47,126,11],[151,50,126,42],[151,55,126,47,"readUint32"],[151,65,126,42],[151,67,126,4],[152,0,127,4],[153,0,73,21],[153,7,73,2],[155,0,129,2],[155,15,129,11,"Writer"],[155,21,129,2],[155,24,129,20],[155,25,130,3],[157,0,131,2,"Writer"],[157,6,131,2,"Writer"],[157,12,131,8],[157,13,131,9,"prototype"],[157,22,131,2],[157,25,131,21],[158,0,132,3,"writeByte"],[158,8,132,3,"writeByte"],[158,17,132,12],[158,19,132,14,"notImplemented"],[158,33,132,28],[158,34,132,29],[158,45,132,28],[158,46,131,21],[159,0,133,3,"result"],[159,8,133,3,"result"],[159,14,133,9],[159,16,133,11,"notImplemented"],[159,30,133,25],[159,31,133,26],[159,39,133,25],[159,40,131,21],[160,0,134,3,"writeFloat16"],[160,8,134,3,"writeFloat16"],[160,20,134,15],[160,22,134,17,"notImplemented"],[160,36,134,31],[160,37,134,32],[160,51,134,31],[160,52,131,21],[161,0,135,3,"writeFloat32"],[161,8,135,3,"writeFloat32"],[161,20,135,15],[161,22,135,17,"notImplemented"],[161,36,135,31],[161,37,135,32],[161,51,135,31],[161,52,131,21],[162,0,136,3,"writeFloat64"],[162,8,136,3,"writeFloat64"],[162,20,136,15],[162,22,136,17,"notImplemented"],[162,36,136,31],[162,37,136,32],[162,51,136,31],[162,52,131,21],[163,0,137,3,"writeUint16"],[163,8,137,3,"writeUint16"],[163,19,137,14],[163,21,137,16],[163,42,137,26,"value"],[163,47,137,16],[163,49,137,33],[164,0,138,4],[164,15,138,9,"writeByte"],[164,24,138,4],[164,25,138,20,"value"],[164,30,138,25],[164,34,138,29],[164,35,138,19],[164,38,138,32],[164,42,138,4],[165,0,139,4],[165,15,139,9,"writeByte"],[165,24,139,4],[165,25,139,19,"value"],[165,30,139,24],[165,33,139,25],[165,37,139,4],[166,0,140,4],[166,9,131,21],[167,0,141,3,"writeUint32"],[167,8,141,3,"writeUint32"],[167,19,141,14],[167,21,141,16],[167,42,141,26,"value"],[167,47,141,16],[167,49,141,33],[168,0,142,4],[168,15,142,9,"writeUint16"],[168,26,142,4],[168,27,142,22,"value"],[168,32,142,27],[168,36,142,29],[168,38,142,21],[168,41,142,33],[168,47,142,4],[169,0,143,4],[169,15,143,9,"writeUint16"],[169,26,143,4],[169,27,143,21,"value"],[169,32,143,26],[169,35,143,27],[169,41,143,4],[170,0,144,4],[170,9,131,21],[171,0,145,3,"writeUint64"],[171,8,145,3,"writeUint64"],[171,19,145,14],[171,21,145,16],[171,42,145,26,"value"],[171,47,145,16],[171,49,145,33],[172,0,146,4],[172,14,146,8,"value"],[172,19,146,13],[172,23,146,17],[172,39,146,8],[172,43,146,37,"value"],[172,48,146,42],[172,52,146,46],[172,53,146,47],[172,69,146,4],[172,71,146,65],[173,0,147,5],[173,18,147,11],[173,22,147,15,"Error"],[173,27,147,11],[173,28,147,21],[173,58,147,51,"value"],[173,63,147,21],[173,66,147,59],[173,109,147,11],[173,110,147,5],[174,0,148,5],[176,0,149,4],[176,15,149,9,"writeUint32"],[176,26,149,4],[176,27,149,21,"Math"],[176,31,149,25],[176,32,149,26,"floor"],[176,37,149,21],[176,38,149,32,"value"],[176,43,149,37],[176,46,149,38],[176,56,149,21],[176,57,149,4],[177,0,150,4],[177,15,150,9,"writeUint32"],[177,26,150,4],[177,27,150,21,"value"],[177,32,150,26],[177,35,150,27],[177,45,150,4],[178,0,151,4],[178,9,131,21],[179,0,152,3,"writeString"],[179,8,152,3,"writeString"],[179,19,152,14],[179,21,152,16,"notImplemented"],[179,35,152,30],[179,36,152,31],[179,49,152,30],[179,50,131,21],[180,0,153,3,"canWriteBinary"],[180,8,153,3,"canWriteBinary"],[180,22,153,17],[180,24,153,19],[180,48,153,29,"chunk"],[180,53,153,19],[180,55,153,36],[181,0,154,4],[181,17,154,11],[181,22,154,4],[182,0,155,4],[182,9,131,21],[183,0,156,3,"writeBinary"],[183,8,156,3,"writeBinary"],[183,19,156,14],[183,21,156,16,"notImplemented"],[183,35,156,30],[183,36,156,31],[183,48,156,30],[184,0,131,21],[184,7,131,2],[186,0,159,2],[186,15,159,11,"readHeaderRaw"],[186,28,159,2],[186,29,159,25,"reader"],[186,35,159,2],[186,37,159,33],[187,0,160,3],[187,12,160,7,"firstByte"],[187,21,160,16],[187,24,160,19,"reader"],[187,30,160,25],[187,31,160,26,"readByte"],[187,39,160,19],[187,41,160,3],[188,0,161,3],[188,12,161,7,"majorType"],[188,21,161,16],[188,24,161,19,"firstByte"],[188,33,161,28],[188,37,161,32],[188,38,161,3],[189,0,161,3],[189,12,161,35,"value"],[189,17,161,40],[189,20,161,43,"firstByte"],[189,29,161,52],[189,32,161,53],[189,36,161,3],[190,0,162,3],[190,15,162,10],[191,0,162,11,"type"],[191,10,162,11,"type"],[191,14,162,15],[191,16,162,17,"majorType"],[191,25,162,10],[192,0,162,28,"value"],[192,10,162,28,"value"],[192,15,162,33],[192,17,162,35,"value"],[193,0,162,10],[193,9,162,3],[194,0,163,3],[196,0,165,2],[196,15,165,11,"valueFromHeader"],[196,30,165,2],[196,31,165,27,"header"],[196,37,165,2],[196,39,165,35,"reader"],[196,45,165,2],[196,47,165,43],[197,0,166,3],[197,12,166,7,"value"],[197,17,166,12],[197,20,166,15,"header"],[197,26,166,21],[197,27,166,22,"value"],[197,32,166,3],[199,0,167,3],[199,12,167,7,"value"],[199,17,167,12],[199,20,167,15],[199,22,167,3],[199,24,167,19],[200,0,168,4],[200,17,168,11,"value"],[200,22,168,4],[201,0,169,4],[201,9,167,3],[201,15,169,10],[201,19,169,14,"value"],[201,24,169,19],[201,28,169,23],[201,30,169,10],[201,32,169,27],[202,0,170,4],[202,17,170,11,"reader"],[202,23,170,17],[202,24,170,18,"readByte"],[202,32,170,11],[202,34,170,4],[203,0,171,4],[203,9,169,10],[203,15,171,10],[203,19,171,14,"value"],[203,24,171,19],[203,28,171,23],[203,30,171,10],[203,32,171,27],[204,0,172,4],[204,17,172,11,"reader"],[204,23,172,17],[204,24,172,18,"readUint16"],[204,34,172,11],[204,36,172,4],[205,0,173,4],[205,9,171,10],[205,15,173,10],[205,19,173,14,"value"],[205,24,173,19],[205,28,173,23],[205,30,173,10],[205,32,173,27],[206,0,174,4],[206,17,174,11,"reader"],[206,23,174,17],[206,24,174,18,"readUint32"],[206,34,174,11],[206,36,174,4],[207,0,175,4],[207,9,173,10],[207,15,175,10],[207,19,175,14,"value"],[207,24,175,19],[207,28,175,23],[207,30,175,10],[207,32,175,27],[208,0,176,4],[208,17,176,11,"reader"],[208,23,176,17],[208,24,176,18,"readUint64"],[208,34,176,11],[208,36,176,4],[209,0,177,4],[209,9,175,10],[209,15,177,10],[209,19,177,14,"value"],[209,24,177,19],[209,28,177,23],[209,30,177,10],[209,32,177,27],[210,0,179,4],[210,17,179,11],[210,21,179,4],[211,0,180,4],[213,0,181,3,"notImplemented"],[213,8,181,3,"notImplemented"],[213,22,181,17],[213,23,181,18],[213,45,181,40,"value"],[213,50,181,17],[213,51,181,3],[214,0,182,3],[216,0,184,2],[216,15,184,11,"writeHeaderRaw"],[216,29,184,2],[216,30,184,26,"type"],[216,34,184,2],[216,36,184,32,"value"],[216,41,184,2],[216,43,184,39,"writer"],[216,49,184,2],[216,51,184,47],[217,0,185,3,"writer"],[217,8,185,3,"writer"],[217,14,185,9],[217,15,185,10,"writeByte"],[217,24,185,3],[217,25,185,21,"type"],[217,29,185,25],[217,33,185,27],[217,34,185,20],[217,37,185,30,"value"],[217,42,185,3],[218,0,186,3],[220,0,188,2],[220,15,188,11,"writeHeader"],[220,26,188,2],[220,27,188,23,"type"],[220,31,188,2],[220,33,188,29,"value"],[220,38,188,2],[220,40,188,36,"writer"],[220,46,188,2],[220,48,188,44],[221,0,189,3],[221,12,189,7,"firstByte"],[221,21,189,16],[221,24,189,19,"type"],[221,28,189,23],[221,32,189,25],[221,33,189,3],[223,0,190,3],[223,12,190,7,"value"],[223,17,190,12],[223,20,190,15],[223,22,190,3],[223,24,190,19],[224,0,191,4,"writer"],[224,10,191,4,"writer"],[224,16,191,10],[224,17,191,11,"writeByte"],[224,26,191,4],[224,27,191,21,"firstByte"],[224,36,191,30],[224,39,191,31,"value"],[224,44,191,4],[225,0,192,4],[225,9,190,3],[225,15,192,10],[225,19,192,14,"value"],[225,24,192,19],[225,27,192,22],[225,30,192,10],[225,32,192,27],[226,0,193,4,"writer"],[226,10,193,4,"writer"],[226,16,193,10],[226,17,193,11,"writeByte"],[226,26,193,4],[226,27,193,21,"firstByte"],[226,36,193,30],[226,39,193,31],[226,41,193,4],[227,0,194,4,"writer"],[227,10,194,4,"writer"],[227,16,194,10],[227,17,194,11,"writeByte"],[227,26,194,4],[227,27,194,21,"value"],[227,32,194,4],[228,0,195,4],[228,9,192,10],[228,15,195,10],[228,19,195,14,"value"],[228,24,195,19],[228,27,195,22],[228,32,195,10],[228,34,195,29],[229,0,196,4,"writer"],[229,10,196,4,"writer"],[229,16,196,10],[229,17,196,11,"writeByte"],[229,26,196,4],[229,27,196,21,"firstByte"],[229,36,196,30],[229,39,196,31],[229,41,196,4],[230,0,197,4,"writer"],[230,10,197,4,"writer"],[230,16,197,10],[230,17,197,11,"writeUint16"],[230,28,197,4],[230,29,197,23,"value"],[230,34,197,4],[231,0,198,4],[231,9,195,10],[231,15,198,10],[231,19,198,14,"value"],[231,24,198,19],[231,27,198,22],[231,37,198,10],[231,39,198,34],[232,0,199,4,"writer"],[232,10,199,4,"writer"],[232,16,199,10],[232,17,199,11,"writeByte"],[232,26,199,4],[232,27,199,21,"firstByte"],[232,36,199,30],[232,39,199,31],[232,41,199,4],[233,0,200,4,"writer"],[233,10,200,4,"writer"],[233,16,200,10],[233,17,200,11,"writeUint32"],[233,28,200,4],[233,29,200,23,"value"],[233,34,200,4],[234,0,201,4],[234,9,198,10],[234,15,201,10],[235,0,202,4,"writer"],[235,10,202,4,"writer"],[235,16,202,10],[235,17,202,11,"writeByte"],[235,26,202,4],[235,27,202,21,"firstByte"],[235,36,202,30],[235,39,202,31],[235,41,202,4],[236,0,203,4,"writer"],[236,10,203,4,"writer"],[236,16,203,10],[236,17,203,11,"writeUint64"],[236,28,203,4],[236,29,203,23,"value"],[236,34,203,4],[237,0,204,4],[238,0,205,3],[240,0,207,2],[240,10,207,6,"stopCode"],[240,18,207,14],[240,21,207,17],[240,25,207,21,"Error"],[240,30,207,17],[240,32,207,2],[242,0,209,2],[242,15,209,11,"decodeReader"],[242,27,209,2],[242,28,209,24,"reader"],[242,34,209,2],[242,36,209,32],[243,0,210,3],[243,12,210,7,"header"],[243,18,210,13],[243,21,210,16,"readHeaderRaw"],[243,34,210,29],[243,35,210,30,"reader"],[243,41,210,29],[243,42,210,3],[245,0,211,3],[245,16,211,11,"header"],[245,22,211,17],[245,23,211,18,"type"],[245,27,211,3],[246,0,212,4],[246,15,212,9],[246,16,212,4],[247,0,213,5],[247,19,213,12,"valueFromHeader"],[247,34,213,27],[247,35,213,28,"header"],[247,41,213,27],[247,43,213,36,"reader"],[247,49,213,27],[247,50,213,5],[249,0,214,4],[249,15,214,9],[249,16,214,4],[250,0,215,5],[250,19,215,12],[250,20,215,13],[250,21,215,12],[250,24,215,16,"valueFromHeader"],[250,39,215,31],[250,40,215,32,"header"],[250,46,215,31],[250,48,215,40,"reader"],[250,54,215,31],[250,55,215,5],[252,0,216,4],[252,15,216,9],[252,16,216,4],[253,0,217,5],[253,19,217,12,"reader"],[253,25,217,18],[253,26,217,19,"readChunk"],[253,35,217,12],[253,36,217,29,"valueFromHeader"],[253,51,217,44],[253,52,217,45,"header"],[253,58,217,44],[253,60,217,53,"reader"],[253,66,217,44],[253,67,217,12],[253,68,217,5],[255,0,218,4],[255,15,218,9],[255,16,218,4],[256,0,219,5],[256,16,219,9,"buffer"],[256,22,219,15],[256,25,219,18,"reader"],[256,31,219,24],[256,32,219,25,"readChunk"],[256,41,219,18],[256,42,219,35,"valueFromHeader"],[256,57,219,50],[256,58,219,51,"header"],[256,64,219,50],[256,66,219,59,"reader"],[256,72,219,50],[256,73,219,18],[256,74,219,5],[257,0,220,5],[257,19,220,12,"buffer"],[257,25,220,18],[257,26,220,19,"toString"],[257,34,220,12],[257,35,220,28],[257,42,220,12],[257,43,220,5],[259,0,221,4],[259,15,221,9],[259,16,221,4],[260,0,222,4],[260,15,222,9],[260,16,222,4],[261,0,223,5],[261,16,223,9,"arrayLength"],[261,27,223,20],[261,30,223,23,"valueFromHeader"],[261,45,223,38],[261,46,223,39,"header"],[261,52,223,38],[261,54,223,47,"reader"],[261,60,223,38],[261,61,223,5],[262,0,224,5],[262,16,224,9,"result"],[262,22,224,15],[262,25,224,18],[262,27,224,5],[264,0,225,5],[264,16,225,9,"arrayLength"],[264,27,225,20],[264,32,225,25],[264,36,225,5],[264,38,225,31],[265,0,226,6],[265,18,226,10,"header"],[265,24,226,16],[265,25,226,17,"type"],[265,29,226,10],[265,34,226,26],[265,35,226,6],[265,37,226,29],[266,0,227,7,"arrayLength"],[266,16,227,7,"arrayLength"],[266,27,227,18],[266,31,227,22],[266,32,227,7],[267,0,228,7],[269,0,229,6],[269,19,229,11],[269,23,229,15,"i"],[269,24,229,16],[269,27,229,19],[269,28,229,6],[269,30,229,22,"i"],[269,31,229,23],[269,34,229,26,"arrayLength"],[269,45,229,6],[269,47,229,39,"i"],[269,48,229,40],[269,50,229,6],[269,52,229,44],[270,0,230,7,"result"],[270,16,230,7,"result"],[270,22,230,13],[270,23,230,14,"i"],[270,24,230,13],[270,25,230,7],[270,28,230,19,"decodeReader"],[270,40,230,31],[270,41,230,32,"reader"],[270,47,230,31],[270,48,230,7],[271,0,231,7],[272,0,232,6],[272,13,225,5],[272,19,232,12],[273,0,233,6],[273,18,233,10,"item"],[273,22,233,6],[275,0,234,6],[275,21,234,13],[275,22,234,14,"item"],[275,26,234,18],[275,29,234,21,"decodeReader"],[275,41,234,33],[275,42,234,34,"reader"],[275,48,234,33],[275,49,234,13],[275,55,234,47,"stopCode"],[275,63,234,6],[275,65,234,57],[276,0,235,7,"result"],[276,16,235,7,"result"],[276,22,235,13],[276,23,235,14,"push"],[276,27,235,7],[276,28,235,19,"item"],[276,32,235,7],[277,0,236,7],[278,0,237,6],[280,0,238,5],[280,16,238,9,"header"],[280,22,238,15],[280,23,238,16,"type"],[280,27,238,9],[280,32,238,25],[280,33,238,5],[280,35,238,28],[281,0,239,6],[281,18,239,10,"objResult"],[281,27,239,19],[281,30,239,22],[281,32,239,6],[283,0,240,6],[283,19,240,11],[283,23,240,15,"i"],[283,24,240,16],[283,27,240,19],[283,28,240,6],[283,30,240,22,"i"],[283,31,240,23],[283,34,240,26,"result"],[283,40,240,32],[283,41,240,33,"length"],[283,47,240,6],[283,49,240,41,"i"],[283,50,240,42],[283,54,240,46],[283,55,240,6],[283,57,240,49],[284,0,241,7,"objResult"],[284,16,241,7,"objResult"],[284,25,241,16],[284,26,241,17,"result"],[284,32,241,23],[284,33,241,24,"i"],[284,34,241,23],[284,35,241,16],[284,36,241,7],[284,39,241,30,"result"],[284,45,241,36],[284,46,241,37,"i"],[284,47,241,38],[284,50,241,41],[284,51,241,36],[284,52,241,7],[285,0,242,7],[287,0,243,6],[287,21,243,13,"objResult"],[287,30,243,6],[288,0,244,6],[288,13,238,5],[288,19,244,12],[289,0,245,6],[289,21,245,13,"result"],[289,27,245,6],[290,0,246,6],[292,0,247,4],[292,15,247,9],[292,16,247,4],[293,0,248,5],[293,16,248,9,"tag"],[293,19,248,12],[293,22,248,15,"valueFromHeader"],[293,37,248,30],[293,38,248,31,"header"],[293,44,248,30],[293,46,248,39,"reader"],[293,52,248,30],[293,53,248,5],[294,0,249,5],[294,16,249,9,"decoder"],[294,23,249,16],[294,26,249,19,"semanticDecoders"],[294,42,249,35],[294,43,249,36,"tag"],[294,46,249,35],[294,47,249,5],[295,0,250,5],[295,16,250,9,"result"],[295,22,250,15],[295,25,250,18,"decodeReader"],[295,37,250,30],[295,38,250,31,"reader"],[295,44,250,30],[295,45,250,5],[296,0,251,5],[296,19,251,12,"decoder"],[296,26,251,19],[296,29,251,22,"decoder"],[296,36,251,29],[296,37,251,30,"result"],[296,43,251,29],[296,44,251,19],[296,47,251,40,"result"],[296,53,251,5],[298,0,252,4],[298,15,252,9],[298,16,252,4],[299,0,253,5],[299,16,253,9,"header"],[299,22,253,15],[299,23,253,16,"value"],[299,28,253,9],[299,33,253,26],[299,35,253,5],[299,37,253,30],[300,0,254,6],[300,21,254,13,"reader"],[300,27,254,19],[300,28,254,20,"readFloat16"],[300,39,254,13],[300,41,254,6],[301,0,255,6],[301,13,253,5],[301,19,255,12],[301,23,255,16,"header"],[301,29,255,22],[301,30,255,23,"value"],[301,35,255,16],[301,40,255,33],[301,42,255,12],[301,44,255,37],[302,0,256,6],[302,21,256,13,"reader"],[302,27,256,19],[302,28,256,20,"readFloat32"],[302,39,256,13],[302,41,256,6],[303,0,257,6],[303,13,255,12],[303,19,257,12],[303,23,257,16,"header"],[303,29,257,22],[303,30,257,23,"value"],[303,35,257,16],[303,40,257,33],[303,42,257,12],[303,44,257,37],[304,0,258,6],[304,21,258,13,"reader"],[304,27,258,19],[304,28,258,20,"readFloat64"],[304,39,258,13],[304,41,258,6],[305,0,259,6],[307,0,260,5],[307,20,260,13,"valueFromHeader"],[307,35,260,28],[307,36,260,29,"header"],[307,42,260,28],[307,44,260,37,"reader"],[307,50,260,28],[307,51,260,5],[308,0,261,6],[308,19,261,11],[308,21,261,6],[309,0,262,7],[309,23,262,14],[309,28,262,7],[311,0,263,6],[311,19,263,11],[311,21,263,6],[312,0,264,7],[312,23,264,14],[312,27,264,7],[314,0,265,6],[314,19,265,11],[314,21,265,6],[315,0,266,7],[315,23,266,14],[315,27,266,7],[317,0,267,6],[317,19,267,11],[317,21,267,6],[318,0,268,7],[318,23,268,14,"undefined"],[318,32,268,7],[320,0,269,6],[320,19,269,11],[320,23,269,6],[321,0,270,7],[321,23,270,14,"stopCode"],[321,31,270,7],[323,0,271,6],[324,0,272,7],[324,22,272,13],[324,26,272,17,"Error"],[324,31,272,13],[324,32,272,23],[324,58,272,49,"header"],[324,64,272,55],[324,65,272,56,"value"],[324,70,272,13],[324,71,272,7],[325,0,260,5],[327,0,274,4],[328,0,275,5],[328,18,275,11],[328,22,275,15,"Error"],[328,27,275,11],[328,28,275,21],[328,53,275,46,"JSON"],[328,57,275,50],[328,58,275,51,"stringify"],[328,67,275,46],[328,68,275,61,"header"],[328,74,275,46],[328,75,275,11],[328,76,275,5],[329,0,211,3],[331,0,277,3],[331,14,277,9],[331,18,277,13,"Error"],[331,23,277,9],[331,24,277,19],[331,45,277,9],[331,46,277,3],[332,0,278,3],[334,0,280,2],[334,15,280,11,"encodeWriter"],[334,27,280,2],[334,28,280,24,"data"],[334,32,280,2],[334,34,280,30,"writer"],[334,40,280,2],[334,42,280,38],[335,0,281,3],[335,13,281,8],[335,17,281,12,"i"],[335,18,281,13],[335,21,281,16],[335,22,281,3],[335,24,281,19,"i"],[335,25,281,20],[335,28,281,23,"semanticEncoders"],[335,44,281,39],[335,45,281,40,"length"],[335,51,281,3],[335,53,281,48,"i"],[335,54,281,49],[335,56,281,3],[335,58,281,53],[336,0,282,4],[336,14,282,8,"replacement"],[336,25,282,19],[336,28,282,22,"semanticEncoders"],[336,44,282,38],[336,45,282,39,"i"],[336,46,282,38],[336,47,282,22],[336,48,282,42,"fn"],[336,50,282,22],[336,51,282,45,"data"],[336,55,282,22],[336,56,282,4],[338,0,283,4],[338,14,283,8,"replacement"],[338,25,283,19],[338,30,283,24,"undefined"],[338,39,283,4],[338,41,283,35],[339,0,284,5,"writeHeader"],[339,12,284,5,"writeHeader"],[339,23,284,16],[339,24,284,17],[339,25,284,16],[339,27,284,20,"semanticEncoders"],[339,43,284,36],[339,44,284,37,"i"],[339,45,284,36],[339,46,284,20],[339,47,284,40,"tag"],[339,50,284,16],[339,52,284,45,"writer"],[339,58,284,16],[339,59,284,5],[340,0,285,5],[340,19,285,12,"encodeWriter"],[340,31,285,24],[340,32,285,25,"replacement"],[340,43,285,24],[340,45,285,38,"writer"],[340,51,285,24],[340,52,285,5],[341,0,286,5],[342,0,287,4],[344,0,289,3],[344,12,289,7,"data"],[344,16,289,11],[344,20,289,15],[344,27,289,22,"data"],[344,31,289,26],[344,32,289,27,"toCBOR"],[344,38,289,15],[344,43,289,38],[344,53,289,3],[344,55,289,50],[345,0,290,4,"data"],[345,10,290,4,"data"],[345,14,290,8],[345,17,290,11,"data"],[345,21,290,15],[345,22,290,16,"toCBOR"],[345,28,290,11],[345,30,290,4],[346,0,291,4],[348,0,293,3],[348,12,293,7,"data"],[348,16,293,11],[348,21,293,16],[348,26,293,3],[348,28,293,23],[349,0,294,4,"writeHeader"],[349,10,294,4,"writeHeader"],[349,21,294,15],[349,22,294,16],[349,23,294,15],[349,25,294,19],[349,27,294,15],[349,29,294,23,"writer"],[349,35,294,15],[349,36,294,4],[350,0,295,4],[350,9,293,3],[350,15,295,10],[350,19,295,14,"data"],[350,23,295,18],[350,28,295,23],[350,32,295,10],[350,34,295,29],[351,0,296,4,"writeHeader"],[351,10,296,4,"writeHeader"],[351,21,296,15],[351,22,296,16],[351,23,296,15],[351,25,296,19],[351,27,296,15],[351,29,296,23,"writer"],[351,35,296,15],[351,36,296,4],[352,0,297,4],[352,9,295,10],[352,15,297,10],[352,19,297,14,"data"],[352,23,297,18],[352,28,297,23],[352,32,297,10],[352,34,297,29],[353,0,298,4,"writeHeader"],[353,10,298,4,"writeHeader"],[353,21,298,15],[353,22,298,16],[353,23,298,15],[353,25,298,19],[353,27,298,15],[353,29,298,23,"writer"],[353,35,298,15],[353,36,298,4],[354,0,299,4],[354,9,297,10],[354,15,299,10],[354,19,299,14,"data"],[354,23,299,18],[354,28,299,23,"undefined"],[354,37,299,10],[354,39,299,34],[355,0,300,4,"writeHeader"],[355,10,300,4,"writeHeader"],[355,21,300,15],[355,22,300,16],[355,23,300,15],[355,25,300,19],[355,27,300,15],[355,29,300,23,"writer"],[355,35,300,15],[355,36,300,4],[356,0,301,4],[356,9,299,10],[356,15,301,10],[356,19,301,14],[356,26,301,21,"data"],[356,30,301,14],[356,35,301,30],[356,43,301,10],[356,45,301,40],[357,0,302,4],[357,14,302,8,"Math"],[357,18,302,12],[357,19,302,13,"floor"],[357,24,302,8],[357,25,302,19,"data"],[357,29,302,8],[357,35,302,29,"data"],[357,39,302,8],[357,43,302,37,"data"],[357,47,302,41],[357,50,302,44],[357,66,302,8],[357,70,302,64,"data"],[357,74,302,68],[357,77,302,71],[357,78,302,72],[357,94,302,4],[357,96,302,90],[358,0,304,5],[358,16,304,9,"data"],[358,20,304,13],[358,23,304,16],[358,24,304,5],[358,26,304,19],[359,0,305,6,"writeHeader"],[359,14,305,6,"writeHeader"],[359,25,305,17],[359,26,305,18],[359,27,305,17],[359,29,305,21],[359,30,305,22],[359,31,305,21],[359,34,305,26,"data"],[359,38,305,17],[359,40,305,32,"writer"],[359,46,305,17],[359,47,305,6],[360,0,306,6],[360,13,304,5],[360,19,306,12],[361,0,307,6,"writeHeader"],[361,14,307,6,"writeHeader"],[361,25,307,17],[361,26,307,18],[361,27,307,17],[361,29,307,21,"data"],[361,33,307,17],[361,35,307,27,"writer"],[361,41,307,17],[361,42,307,6],[362,0,308,6],[363,0,309,5],[363,11,302,4],[363,17,309,11],[364,0,310,5,"writeHeaderRaw"],[364,12,310,5,"writeHeaderRaw"],[364,26,310,19],[364,27,310,20],[364,28,310,19],[364,30,310,23],[364,32,310,19],[364,34,310,27,"writer"],[364,40,310,19],[364,41,310,5],[365,0,311,5,"writer"],[365,12,311,5,"writer"],[365,18,311,11],[365,19,311,12,"writeFloat64"],[365,31,311,5],[365,32,311,25,"data"],[365,36,311,5],[366,0,312,5],[367,0,313,4],[367,9,301,10],[367,15,313,10],[367,19,313,14],[367,26,313,21,"data"],[367,30,313,14],[367,35,313,30],[367,43,313,10],[367,45,313,40],[368,0,314,4,"writer"],[368,10,314,4,"writer"],[368,16,314,10],[368,17,314,11,"writeString"],[368,28,314,4],[368,29,314,23,"data"],[368,33,314,4],[368,35,314,29],[368,45,314,39,"length"],[368,51,314,29],[368,53,314,47],[369,0,315,5,"writeHeader"],[369,12,315,5,"writeHeader"],[369,23,315,16],[369,24,315,17],[369,25,315,16],[369,27,315,20,"length"],[369,33,315,16],[369,35,315,28,"writer"],[369,41,315,16],[369,42,315,5],[370,0,316,5],[370,11,314,4],[371,0,317,4],[371,9,313,10],[371,15,317,10],[371,19,317,14,"writer"],[371,25,317,20],[371,26,317,21,"canWriteBinary"],[371,40,317,14],[371,41,317,36,"data"],[371,45,317,14],[371,46,317,10],[371,48,317,43],[372,0,318,4,"writer"],[372,10,318,4,"writer"],[372,16,318,10],[372,17,318,11,"writeBinary"],[372,28,318,4],[372,29,318,23,"data"],[372,33,318,4],[372,35,318,29],[372,45,318,39,"length"],[372,51,318,29],[372,53,318,47],[373,0,319,5,"writeHeader"],[373,12,319,5,"writeHeader"],[373,23,319,16],[373,24,319,17],[373,25,319,16],[373,27,319,20,"length"],[373,33,319,16],[373,35,319,28,"writer"],[373,41,319,16],[373,42,319,5],[374,0,320,5],[374,11,318,4],[375,0,321,4],[375,9,317,10],[375,15,321,10],[375,19,321,14],[375,26,321,21,"data"],[375,30,321,14],[375,35,321,30],[375,43,321,10],[375,45,321,40],[376,0,322,4],[376,14,322,8,"api"],[376,17,322,11],[376,18,322,12,"config"],[376,24,322,8],[376,25,322,19,"useToJSON"],[376,34,322,8],[376,38,322,32],[376,45,322,39,"data"],[376,49,322,43],[376,50,322,44,"toJSON"],[376,56,322,32],[376,61,322,55],[376,71,322,4],[376,73,322,67],[377,0,323,8,"data"],[377,12,323,8,"data"],[377,16,323,12],[377,19,323,15,"data"],[377,23,323,19],[377,24,323,20,"toJSON"],[377,30,323,15],[377,32,323,8],[378,0,324,8],[380,0,325,4],[380,14,325,8,"Array"],[380,19,325,13],[380,20,325,14,"isArray"],[380,27,325,8],[380,28,325,22,"data"],[380,32,325,8],[380,33,325,4],[380,35,325,29],[381,0,326,5,"writeHeader"],[381,12,326,5,"writeHeader"],[381,23,326,16],[381,24,326,17],[381,25,326,16],[381,27,326,20,"data"],[381,31,326,24],[381,32,326,25,"length"],[381,38,326,16],[381,40,326,33,"writer"],[381,46,326,16],[381,47,326,5],[383,0,327,5],[383,17,327,10],[383,21,327,14,"i"],[383,22,327,15],[383,25,327,18],[383,26,327,5],[383,28,327,21,"i"],[383,29,327,22],[383,32,327,25,"data"],[383,36,327,29],[383,37,327,30,"length"],[383,43,327,5],[383,45,327,38,"i"],[383,46,327,39],[383,48,327,5],[383,50,327,43],[384,0,328,6,"encodeWriter"],[384,14,328,6,"encodeWriter"],[384,26,328,18],[384,27,328,19,"data"],[384,31,328,23],[384,32,328,24,"i"],[384,33,328,23],[384,34,328,18],[384,36,328,28,"writer"],[384,42,328,18],[384,43,328,6],[385,0,329,6],[386,0,330,5],[386,11,325,4],[386,17,330,11],[387,0,331,5],[387,16,331,9,"keys"],[387,20,331,13],[387,23,331,16,"Object"],[387,29,331,22],[387,30,331,23,"keys"],[387,34,331,16],[387,35,331,28,"data"],[387,39,331,16],[387,40,331,5],[388,0,332,5,"writeHeader"],[388,12,332,5,"writeHeader"],[388,23,332,16],[388,24,332,17],[388,25,332,16],[388,27,332,20,"keys"],[388,31,332,24],[388,32,332,25,"length"],[388,38,332,16],[388,40,332,33,"writer"],[388,46,332,16],[388,47,332,5],[390,0,333,5],[390,17,333,10],[390,21,333,14,"i"],[390,22,333,15],[390,25,333,18],[390,26,333,5],[390,28,333,21,"i"],[390,29,333,22],[390,32,333,25,"keys"],[390,36,333,29],[390,37,333,30,"length"],[390,43,333,5],[390,45,333,38,"i"],[390,46,333,39],[390,48,333,5],[390,50,333,43],[391,0,334,6,"encodeWriter"],[391,14,334,6,"encodeWriter"],[391,26,334,18],[391,27,334,19,"keys"],[391,31,334,23],[391,32,334,24,"i"],[391,33,334,23],[391,34,334,18],[391,36,334,28,"writer"],[391,42,334,18],[391,43,334,6],[392,0,335,6,"encodeWriter"],[392,14,335,6,"encodeWriter"],[392,26,335,18],[392,27,335,19,"data"],[392,31,335,23],[392,32,335,24,"keys"],[392,36,335,28],[392,37,335,29,"i"],[392,38,335,28],[392,39,335,23],[392,40,335,18],[392,42,335,34,"writer"],[392,48,335,18],[392,49,335,6],[393,0,336,6],[394,0,337,5],[395,0,338,4],[395,9,321,10],[395,15,338,10],[396,0,339,4],[396,16,339,10],[396,20,339,14,"Error"],[396,25,339,10],[396,26,339,20],[396,60,339,54,"data"],[396,64,339,10],[396,65,339,4],[397,0,340,4],[398,0,341,3],[400,0,343,2],[400,10,343,6,"readerFunctions"],[400,25,343,21],[400,28,343,24],[400,30,343,2],[401,0,344,2],[401,10,344,6,"writerFunctions"],[401,25,344,21],[401,28,344,24],[401,30,344,2],[402,0,346,2],[402,10,346,6,"api"],[402,13,346,9],[402,16,346,12],[403,0,347,3,"config"],[403,8,347,3,"config"],[403,14,347,9],[403,16,347,11],[404,0,348,4,"useToJSON"],[404,10,348,4,"useToJSON"],[404,19,348,13],[404,21,348,15],[405,0,347,11],[405,9,346,12],[406,0,350,3,"addWriter"],[406,8,350,3,"addWriter"],[406,17,350,12],[406,19,350,14],[406,38,350,24,"format"],[406,44,350,14],[406,46,350,32,"writerFunction"],[406,60,350,14],[406,62,350,48],[407,0,351,4],[407,14,351,8],[407,21,351,15,"format"],[407,27,351,8],[407,32,351,26],[407,40,351,4],[407,42,351,36],[408,0,352,5,"writerFunctions"],[408,12,352,5,"writerFunctions"],[408,27,352,20],[408,28,352,21,"push"],[408,32,352,5],[408,33,352,26],[408,43,352,36,"f"],[408,44,352,26],[408,46,352,39],[409,0,353,6],[409,18,353,10,"format"],[409,24,353,16],[409,29,353,21,"f"],[409,30,353,6],[409,32,353,24],[409,39,353,31,"writerFunction"],[409,53,353,45],[409,54,353,46,"f"],[409,55,353,45],[409,56,353,24],[410,0,354,6],[410,13,352,5],[411,0,355,5],[411,11,351,4],[411,17,355,11],[412,0,356,5,"writerFunctions"],[412,12,356,5,"writerFunctions"],[412,27,356,20],[412,28,356,21,"push"],[412,32,356,5],[412,33,356,26,"format"],[412,39,356,5],[413,0,357,5],[414,0,358,4],[414,9,346,12],[415,0,359,3,"addReader"],[415,8,359,3,"addReader"],[415,17,359,12],[415,19,359,14],[415,38,359,24,"format"],[415,44,359,14],[415,46,359,32,"readerFunction"],[415,60,359,14],[415,62,359,48],[416,0,360,4],[416,14,360,8],[416,21,360,15,"format"],[416,27,360,8],[416,32,360,26],[416,40,360,4],[416,42,360,36],[417,0,361,5,"readerFunctions"],[417,12,361,5,"readerFunctions"],[417,27,361,20],[417,28,361,21,"push"],[417,32,361,5],[417,33,361,26],[417,43,361,36,"data"],[417,47,361,26],[417,49,361,42,"f"],[417,50,361,26],[417,52,361,45],[418,0,362,6],[418,18,362,10,"format"],[418,24,362,16],[418,29,362,21,"f"],[418,30,362,6],[418,32,362,24],[418,39,362,31,"readerFunction"],[418,53,362,45],[418,54,362,46,"data"],[418,58,362,45],[418,60,362,52,"f"],[418,61,362,45],[418,62,362,24],[419,0,363,6],[419,13,361,5],[420,0,364,5],[420,11,360,4],[420,17,364,11],[421,0,365,5,"readerFunctions"],[421,12,365,5,"readerFunctions"],[421,27,365,20],[421,28,365,21,"push"],[421,32,365,5],[421,33,365,26,"format"],[421,39,365,5],[422,0,366,5],[423,0,367,4],[423,9,346,12],[424,0,368,3,"encode"],[424,8,368,3,"encode"],[424,14,368,9],[424,16,368,11],[424,32,368,21,"data"],[424,36,368,11],[424,38,368,27,"format"],[424,44,368,11],[424,46,368,35],[425,0,369,4],[425,15,369,9],[425,19,369,13,"i"],[425,20,369,14],[425,23,369,17],[425,24,369,4],[425,26,369,20,"i"],[425,27,369,21],[425,30,369,24,"writerFunctions"],[425,45,369,39],[425,46,369,40,"length"],[425,52,369,4],[425,54,369,48,"i"],[425,55,369,49],[425,57,369,4],[425,59,369,53],[426,0,370,5],[426,16,370,9,"func"],[426,20,370,13],[426,23,370,16,"writerFunctions"],[426,38,370,31],[426,39,370,32,"i"],[426,40,370,31],[426,41,370,5],[427,0,371,5],[427,16,371,9,"writer"],[427,22,371,15],[427,25,371,18,"func"],[427,29,371,22],[427,30,371,23,"format"],[427,36,371,22],[427,37,371,5],[429,0,372,5],[429,16,372,9,"writer"],[429,22,372,5],[429,24,372,17],[430,0,373,6,"encodeWriter"],[430,14,373,6,"encodeWriter"],[430,26,373,18],[430,27,373,19,"data"],[430,31,373,18],[430,33,373,25,"writer"],[430,39,373,18],[430,40,373,6],[431,0,374,6],[431,21,374,13,"writer"],[431,27,374,19],[431,28,374,20,"result"],[431,34,374,13],[431,36,374,6],[432,0,375,6],[433,0,376,5],[435,0,377,4],[435,16,377,10],[435,20,377,14,"Error"],[435,25,377,10],[435,26,377,20],[435,58,377,52,"format"],[435,64,377,10],[435,65,377,4],[436,0,378,4],[436,9,346,12],[437,0,379,3,"decode"],[437,8,379,3,"decode"],[437,14,379,9],[437,16,379,11],[437,32,379,21,"data"],[437,36,379,11],[437,38,379,27,"format"],[437,44,379,11],[437,46,379,35],[438,0,380,4],[438,15,380,9],[438,19,380,13,"i"],[438,20,380,14],[438,23,380,17],[438,24,380,4],[438,26,380,20,"i"],[438,27,380,21],[438,30,380,24,"readerFunctions"],[438,45,380,39],[438,46,380,40,"length"],[438,52,380,4],[438,54,380,48,"i"],[438,55,380,49],[438,57,380,4],[438,59,380,53],[439,0,381,5],[439,16,381,9,"func"],[439,20,381,13],[439,23,381,16,"readerFunctions"],[439,38,381,31],[439,39,381,32,"i"],[439,40,381,31],[439,41,381,5],[440,0,382,5],[440,16,382,9,"reader"],[440,22,382,15],[440,25,382,18,"func"],[440,29,382,22],[440,30,382,23,"data"],[440,34,382,22],[440,36,382,29,"format"],[440,42,382,22],[440,43,382,5],[442,0,383,5],[442,16,383,9,"reader"],[442,22,383,5],[442,24,383,17],[443,0,384,6],[443,21,384,13,"decodeReader"],[443,33,384,25],[443,34,384,26,"reader"],[443,40,384,25],[443,41,384,6],[444,0,385,6],[445,0,386,5],[447,0,387,4],[447,16,387,10],[447,20,387,14,"Error"],[447,25,387,10],[447,26,387,20],[447,57,387,51,"format"],[447,63,387,10],[447,64,387,4],[448,0,388,4],[448,9,346,12],[449,0,389,3,"addSemanticEncode"],[449,8,389,3,"addSemanticEncode"],[449,25,389,20],[449,27,389,22],[449,54,389,32,"tag"],[449,57,389,22],[449,59,389,37,"fn"],[449,61,389,22],[449,63,389,41],[450,0,390,4],[450,14,390,8],[450,21,390,15,"tag"],[450,24,390,8],[450,29,390,23],[450,37,390,8],[450,41,390,35,"tag"],[450,44,390,38],[450,47,390,39],[450,48,390,35],[450,53,390,45],[450,54,390,8],[450,58,390,50,"tag"],[450,61,390,53],[450,64,390,56],[450,65,390,4],[450,67,390,59],[451,0,391,5],[451,18,391,11],[451,22,391,15,"Error"],[451,27,391,11],[451,28,391,21],[451,60,391,11],[451,61,391,5],[452,0,392,5],[454,0,393,4,"semanticEncoders"],[454,10,393,4,"semanticEncoders"],[454,26,393,20],[454,27,393,21,"push"],[454,31,393,4],[454,32,393,26],[455,0,393,27,"tag"],[455,12,393,27,"tag"],[455,15,393,30],[455,17,393,32,"tag"],[455,20,393,26],[456,0,393,37,"fn"],[456,12,393,37,"fn"],[456,14,393,39],[456,16,393,41,"fn"],[457,0,393,26],[457,11,393,4],[458,0,394,4],[458,17,394,11],[458,21,394,4],[459,0,395,4],[459,9,346,12],[460,0,396,3,"addSemanticDecode"],[460,8,396,3,"addSemanticDecode"],[460,25,396,20],[460,27,396,22],[460,54,396,32,"tag"],[460,57,396,22],[460,59,396,37,"fn"],[460,61,396,22],[460,63,396,41],[461,0,397,4],[461,14,397,8],[461,21,397,15,"tag"],[461,24,397,8],[461,29,397,23],[461,37,397,8],[461,41,397,35,"tag"],[461,44,397,38],[461,47,397,39],[461,48,397,35],[461,53,397,45],[461,54,397,8],[461,58,397,50,"tag"],[461,61,397,53],[461,64,397,56],[461,65,397,4],[461,67,397,59],[462,0,398,5],[462,18,398,11],[462,22,398,15,"Error"],[462,27,398,11],[462,28,398,21],[462,60,398,11],[462,61,398,5],[463,0,399,5],[465,0,400,4,"semanticDecoders"],[465,10,400,4,"semanticDecoders"],[465,26,400,20],[465,27,400,21,"tag"],[465,30,400,20],[465,31,400,4],[465,34,400,28,"fn"],[465,36,400,4],[466,0,401,4],[466,17,401,11],[466,21,401,4],[467,0,402,4],[467,9,346,12],[468,0,403,3,"Reader"],[468,8,403,3,"Reader"],[468,14,403,9],[468,16,403,11,"Reader"],[468,22,346,12],[469,0,404,3,"Writer"],[469,8,404,3,"Writer"],[469,14,404,9],[469,16,404,11,"Writer"],[470,0,346,12],[470,7,346,2],[472,0,408,2],[472,15,408,11,"BufferReader"],[472,27,408,2],[472,28,408,24,"buffer"],[472,34,408,2],[472,36,408,32],[473,0,409,3],[473,13,409,8,"buffer"],[473,19,409,3],[473,22,409,17,"buffer"],[473,28,409,3],[474,0,410,3],[474,13,410,8,"pos"],[474,16,410,3],[474,19,410,14],[474,20,410,3],[475,0,411,3],[477,0,412,2,"BufferReader"],[477,6,412,2,"BufferReader"],[477,18,412,14],[477,19,412,15,"prototype"],[477,28,412,2],[477,31,412,27,"Object"],[477,37,412,33],[477,38,412,34,"create"],[477,44,412,27],[477,45,412,41,"Reader"],[477,51,412,47],[477,52,412,48,"prototype"],[477,61,412,27],[477,62,412,2],[479,0,413,2,"BufferReader"],[479,6,413,2,"BufferReader"],[479,18,413,14],[479,19,413,15,"prototype"],[479,28,413,2],[479,29,413,25,"peekByte"],[479,37,413,2],[479,40,413,36],[479,52,413,48],[480,0,414,3],[480,15,414,10],[480,20,414,15,"buffer"],[480,26,414,10],[480,27,414,22],[480,32,414,27,"pos"],[480,35,414,10],[480,36,414,3],[481,0,415,3],[481,7,413,2],[483,0,416,2,"BufferReader"],[483,6,416,2,"BufferReader"],[483,18,416,14],[483,19,416,15,"prototype"],[483,28,416,2],[483,29,416,25,"readByte"],[483,37,416,2],[483,40,416,36],[483,52,416,48],[484,0,417,3],[484,15,417,10],[484,20,417,15,"buffer"],[484,26,417,10],[484,27,417,22],[484,32,417,27,"pos"],[484,35,417,22],[484,37,417,10],[484,38,417,3],[485,0,418,3],[485,7,416,2],[487,0,419,2,"BufferReader"],[487,6,419,2,"BufferReader"],[487,18,419,14],[487,19,419,15,"prototype"],[487,28,419,2],[487,29,419,25,"readUint16"],[487,39,419,2],[487,42,419,38],[487,54,419,50],[488,0,420,3],[488,12,420,7,"result"],[488,18,420,13],[488,21,420,16],[488,26,420,21,"buffer"],[488,32,420,16],[488,33,420,28,"readUInt16BE"],[488,45,420,16],[488,46,420,41],[488,51,420,46,"pos"],[488,54,420,16],[488,55,420,3],[489,0,421,3],[489,13,421,8,"pos"],[489,16,421,3],[489,20,421,15],[489,21,421,3],[490,0,422,3],[490,15,422,10,"result"],[490,21,422,3],[491,0,423,3],[491,7,419,2],[493,0,424,2,"BufferReader"],[493,6,424,2,"BufferReader"],[493,18,424,14],[493,19,424,15,"prototype"],[493,28,424,2],[493,29,424,25,"readUint32"],[493,39,424,2],[493,42,424,38],[493,54,424,50],[494,0,425,3],[494,12,425,7,"result"],[494,18,425,13],[494,21,425,16],[494,26,425,21,"buffer"],[494,32,425,16],[494,33,425,28,"readUInt32BE"],[494,45,425,16],[494,46,425,41],[494,51,425,46,"pos"],[494,54,425,16],[494,55,425,3],[495,0,426,3],[495,13,426,8,"pos"],[495,16,426,3],[495,20,426,15],[495,21,426,3],[496,0,427,3],[496,15,427,10,"result"],[496,21,427,3],[497,0,428,3],[497,7,424,2],[499,0,429,2,"BufferReader"],[499,6,429,2,"BufferReader"],[499,18,429,14],[499,19,429,15,"prototype"],[499,28,429,2],[499,29,429,25,"readFloat32"],[499,40,429,2],[499,43,429,39],[499,55,429,51],[500,0,430,3],[500,12,430,7,"result"],[500,18,430,13],[500,21,430,16],[500,26,430,21,"buffer"],[500,32,430,16],[500,33,430,28,"readFloatBE"],[500,44,430,16],[500,45,430,40],[500,50,430,45,"pos"],[500,53,430,16],[500,54,430,3],[501,0,431,3],[501,13,431,8,"pos"],[501,16,431,3],[501,20,431,15],[501,21,431,3],[502,0,432,3],[502,15,432,10,"result"],[502,21,432,3],[503,0,433,3],[503,7,429,2],[505,0,434,2,"BufferReader"],[505,6,434,2,"BufferReader"],[505,18,434,14],[505,19,434,15,"prototype"],[505,28,434,2],[505,29,434,25,"readFloat64"],[505,40,434,2],[505,43,434,39],[505,55,434,51],[506,0,435,3],[506,12,435,7,"result"],[506,18,435,13],[506,21,435,16],[506,26,435,21,"buffer"],[506,32,435,16],[506,33,435,28,"readDoubleBE"],[506,45,435,16],[506,46,435,41],[506,51,435,46,"pos"],[506,54,435,16],[506,55,435,3],[507,0,436,3],[507,13,436,8,"pos"],[507,16,436,3],[507,20,436,15],[507,21,436,3],[508,0,437,3],[508,15,437,10,"result"],[508,21,437,3],[509,0,438,3],[509,7,434,2],[511,0,439,2,"BufferReader"],[511,6,439,2,"BufferReader"],[511,18,439,14],[511,19,439,15,"prototype"],[511,28,439,2],[511,29,439,25,"readChunk"],[511,38,439,2],[511,41,439,37],[511,51,439,47,"length"],[511,57,439,37],[511,59,439,55],[512,0,440,3],[512,12,440,7,"result"],[512,18,440,13],[512,21,440,16,"Buffer"],[512,27,440,22],[512,28,440,23,"alloc"],[512,33,440,16],[512,34,440,29,"length"],[512,40,440,16],[512,41,440,3],[513,0,441,3],[513,13,441,8,"buffer"],[513,19,441,3],[513,20,441,15,"copy"],[513,24,441,3],[513,25,441,20,"result"],[513,31,441,3],[513,33,441,28],[513,34,441,3],[513,36,441,31],[513,41,441,36,"pos"],[513,44,441,3],[513,46,441,41],[513,51,441,46,"pos"],[513,54,441,41],[513,58,441,53,"length"],[513,64,441,3],[514,0,442,3],[514,15,442,10,"result"],[514,21,442,3],[515,0,443,3],[515,7,439,2],[517,0,445,2],[517,15,445,11,"BufferWriter"],[517,27,445,2],[517,28,445,24,"stringFormat"],[517,40,445,2],[517,42,445,38],[518,0,446,3],[518,13,446,8,"byteLength"],[518,23,446,3],[518,26,446,21],[518,27,446,3],[519,0,447,3],[519,13,447,8,"defaultBufferLength"],[519,32,447,3],[519,35,447,30],[519,40,447,3],[520,0,448,3],[520,13,448,8,"latestBuffer"],[520,25,448,3],[520,28,448,23,"Buffer"],[520,34,448,29],[520,35,448,30,"alloc"],[520,40,448,23],[520,41,448,36],[520,46,448,41,"defaultBufferLength"],[520,65,448,23],[520,66,448,3],[521,0,449,3],[521,13,449,8,"latestBufferOffset"],[521,31,449,3],[521,34,449,29],[521,35,449,3],[522,0,450,3],[522,13,450,8,"completeBuffers"],[522,28,450,3],[522,31,450,26],[522,33,450,3],[523,0,451,3],[523,13,451,8,"stringFormat"],[523,25,451,3],[523,28,451,23,"stringFormat"],[523,40,451,3],[524,0,452,3],[526,0,453,2,"BufferWriter"],[526,6,453,2,"BufferWriter"],[526,18,453,14],[526,19,453,15,"prototype"],[526,28,453,2],[526,31,453,27,"Object"],[526,37,453,33],[526,38,453,34,"create"],[526,44,453,27],[526,45,453,41,"Writer"],[526,51,453,47],[526,52,453,48,"prototype"],[526,61,453,27],[526,62,453,2],[528,0,454,2,"BufferWriter"],[528,6,454,2,"BufferWriter"],[528,18,454,14],[528,19,454,15,"prototype"],[528,28,454,2],[528,29,454,25,"writeByte"],[528,38,454,2],[528,41,454,37],[528,51,454,47,"value"],[528,56,454,37],[528,58,454,54],[529,0,455,3],[529,13,455,8,"latestBuffer"],[529,25,455,3],[529,26,455,21],[529,31,455,26,"latestBufferOffset"],[529,49,455,21],[529,51,455,3],[529,55,455,50,"value"],[529,60,455,3],[531,0,456,3],[531,12,456,7],[531,17,456,12,"latestBufferOffset"],[531,35,456,7],[531,39,456,34],[531,44,456,39,"latestBuffer"],[531,56,456,34],[531,57,456,52,"length"],[531,63,456,3],[531,65,456,60],[532,0,457,4],[532,15,457,9,"completeBuffers"],[532,30,457,4],[532,31,457,25,"push"],[532,35,457,4],[532,36,457,30],[532,41,457,35,"latestBuffer"],[532,53,457,4],[533,0,458,4],[533,15,458,9,"latestBuffer"],[533,27,458,4],[533,30,458,24,"Buffer"],[533,36,458,30],[533,37,458,31,"alloc"],[533,42,458,24],[533,43,458,37],[533,48,458,42,"defaultBufferLength"],[533,67,458,24],[533,68,458,4],[534,0,459,4],[534,15,459,9,"latestBufferOffset"],[534,33,459,4],[534,36,459,30],[534,37,459,4],[535,0,460,4],[537,0,461,3],[537,13,461,8,"byteLength"],[537,23,461,3],[538,0,462,3],[538,7,454,2],[540,0,463,2,"BufferWriter"],[540,6,463,2,"BufferWriter"],[540,18,463,14],[540,19,463,15,"prototype"],[540,28,463,2],[540,29,463,25,"writeFloat32"],[540,41,463,2],[540,44,463,40],[540,54,463,50,"value"],[540,59,463,40],[540,61,463,57],[541,0,464,3],[541,12,464,7,"buffer"],[541,18,464,13],[541,21,464,16,"Buffer"],[541,27,464,22],[541,28,464,23,"alloc"],[541,33,464,16],[541,34,464,29],[541,35,464,16],[541,36,464,3],[542,0,465,3,"buffer"],[542,8,465,3,"buffer"],[542,14,465,9],[542,15,465,10,"writeFloatBE"],[542,27,465,3],[542,28,465,23,"value"],[542,33,465,3],[542,35,465,30],[542,36,465,3],[543,0,466,3],[543,13,466,8,"writeBuffer"],[543,24,466,3],[543,25,466,20,"buffer"],[543,31,466,3],[544,0,467,3],[544,7,463,2],[546,0,468,2,"BufferWriter"],[546,6,468,2,"BufferWriter"],[546,18,468,14],[546,19,468,15,"prototype"],[546,28,468,2],[546,29,468,25,"writeFloat64"],[546,41,468,2],[546,44,468,40],[546,54,468,50,"value"],[546,59,468,40],[546,61,468,57],[547,0,469,3],[547,12,469,7,"buffer"],[547,18,469,13],[547,21,469,16,"Buffer"],[547,27,469,22],[547,28,469,23,"alloc"],[547,33,469,16],[547,34,469,29],[547,35,469,16],[547,36,469,3],[548,0,470,3,"buffer"],[548,8,470,3,"buffer"],[548,14,470,9],[548,15,470,10,"writeDoubleBE"],[548,28,470,3],[548,29,470,24,"value"],[548,34,470,3],[548,36,470,31],[548,37,470,3],[549,0,471,3],[549,13,471,8,"writeBuffer"],[549,24,471,3],[549,25,471,20,"buffer"],[549,31,471,3],[550,0,472,3],[550,7,468,2],[552,0,473,2,"BufferWriter"],[552,6,473,2,"BufferWriter"],[552,18,473,14],[552,19,473,15,"prototype"],[552,28,473,2],[552,29,473,25,"writeString"],[552,40,473,2],[552,43,473,39],[552,53,473,49,"string"],[552,59,473,39],[552,61,473,57,"lengthFunc"],[552,71,473,39],[552,73,473,69],[553,0,474,3],[553,12,474,7,"buffer"],[553,18,474,13],[553,21,474,16,"Buffer"],[553,27,474,22],[553,28,474,23,"from"],[553,32,474,16],[553,33,474,28,"string"],[553,39,474,16],[553,41,474,36],[553,48,474,16],[553,49,474,3],[554,0,475,3,"lengthFunc"],[554,8,475,3,"lengthFunc"],[554,18,475,13],[554,19,475,14,"buffer"],[554,25,475,20],[554,26,475,21,"length"],[554,32,475,13],[554,33,475,3],[555,0,476,3],[555,13,476,8,"writeBuffer"],[555,24,476,3],[555,25,476,20,"buffer"],[555,31,476,3],[556,0,477,3],[556,7,473,2],[558,0,478,2,"BufferWriter"],[558,6,478,2,"BufferWriter"],[558,18,478,14],[558,19,478,15,"prototype"],[558,28,478,2],[558,29,478,25,"canWriteBinary"],[558,43,478,2],[558,46,478,42],[558,56,478,52,"data"],[558,60,478,42],[558,62,478,58],[559,0,479,3],[559,15,479,10,"data"],[559,19,479,14],[559,31,479,26,"Buffer"],[559,37,479,3],[560,0,480,3],[560,7,478,2],[562,0,481,2,"BufferWriter"],[562,6,481,2,"BufferWriter"],[562,18,481,14],[562,19,481,15,"prototype"],[562,28,481,2],[562,29,481,25,"writeBinary"],[562,40,481,2],[562,43,481,39],[562,53,481,49,"buffer"],[562,59,481,39],[562,61,481,57,"lengthFunc"],[562,71,481,39],[562,73,481,69],[563,0,482,3,"lengthFunc"],[563,8,482,3,"lengthFunc"],[563,18,482,13],[563,19,482,14,"buffer"],[563,25,482,20],[563,26,482,21,"length"],[563,32,482,13],[563,33,482,3],[564,0,483,3],[564,13,483,8,"writeBuffer"],[564,24,483,3],[564,25,483,20,"buffer"],[564,31,483,3],[565,0,484,3],[565,7,481,2],[567,0,485,2,"BufferWriter"],[567,6,485,2,"BufferWriter"],[567,18,485,14],[567,19,485,15,"prototype"],[567,28,485,2],[567,29,485,25,"writeBuffer"],[567,40,485,2],[567,43,485,39],[567,53,485,49,"chunk"],[567,58,485,39],[567,60,485,56],[568,0,486,3],[568,12,486,7],[568,14,486,9,"chunk"],[568,19,486,14],[568,31,486,26,"Buffer"],[568,37,486,7],[568,38,486,3],[568,40,486,35],[568,46,486,41],[568,50,486,45,"TypeError"],[568,59,486,41],[568,60,486,55],[568,95,486,41],[568,96,486,35],[570,0,487,3],[570,12,487,7],[570,13,487,8],[570,18,487,13,"latestBufferOffset"],[570,36,487,3],[570,38,487,33],[571,0,488,4],[571,15,488,9,"completeBuffers"],[571,30,488,4],[571,31,488,25,"push"],[571,35,488,4],[571,36,488,30,"chunk"],[571,41,488,4],[572,0,489,4],[572,9,487,3],[572,15,489,10],[572,19,489,14],[572,24,489,19,"latestBuffer"],[572,36,489,14],[572,37,489,32,"length"],[572,43,489,14],[572,46,489,41],[572,51,489,46,"latestBufferOffset"],[572,69,489,14],[572,73,489,68,"chunk"],[572,78,489,73],[572,79,489,74,"length"],[572,85,489,10],[572,87,489,82],[573,0,490,4,"chunk"],[573,10,490,4,"chunk"],[573,15,490,9],[573,16,490,10,"copy"],[573,20,490,4],[573,21,490,15],[573,26,490,20,"latestBuffer"],[573,38,490,4],[573,40,490,34],[573,45,490,39,"latestBufferOffset"],[573,63,490,4],[574,0,491,4],[574,15,491,9,"latestBufferOffset"],[574,33,491,4],[574,37,491,31,"chunk"],[574,42,491,36],[574,43,491,37,"length"],[574,49,491,4],[576,0,492,4],[576,14,492,8],[576,19,492,13,"latestBufferOffset"],[576,37,492,8],[576,41,492,35],[576,46,492,40,"latestBuffer"],[576,58,492,35],[576,59,492,53,"length"],[576,65,492,4],[576,67,492,61],[577,0,493,5],[577,17,493,10,"completeBuffers"],[577,32,493,5],[577,33,493,26,"push"],[577,37,493,5],[577,38,493,31],[577,43,493,36,"latestBuffer"],[577,55,493,5],[578,0,494,5],[578,17,494,10,"latestBuffer"],[578,29,494,5],[578,32,494,25,"Buffer"],[578,38,494,31],[578,39,494,32,"alloc"],[578,44,494,25],[578,45,494,38],[578,50,494,43,"defaultBufferLength"],[578,69,494,25],[578,70,494,5],[579,0,495,5],[579,17,495,10,"latestBufferOffset"],[579,35,495,5],[579,38,495,31],[579,39,495,5],[580,0,496,5],[581,0,497,4],[581,9,489,10],[581,15,497,10],[582,0,498,4],[582,15,498,9,"completeBuffers"],[582,30,498,4],[582,31,498,25,"push"],[582,35,498,4],[582,36,498,30],[582,41,498,35,"latestBuffer"],[582,53,498,30],[582,54,498,48,"slice"],[582,59,498,30],[582,60,498,54],[582,61,498,30],[582,63,498,57],[582,68,498,62,"latestBufferOffset"],[582,86,498,30],[582,87,498,4],[583,0,499,4],[583,15,499,9,"completeBuffers"],[583,30,499,4],[583,31,499,25,"push"],[583,35,499,4],[583,36,499,30,"chunk"],[583,41,499,4],[584,0,500,4],[584,15,500,9,"latestBuffer"],[584,27,500,4],[584,30,500,24,"Buffer"],[584,36,500,30],[584,37,500,31,"alloc"],[584,42,500,24],[584,43,500,37],[584,48,500,42,"defaultBufferLength"],[584,67,500,24],[584,68,500,4],[585,0,501,4],[585,15,501,9,"latestBufferOffset"],[585,33,501,4],[585,36,501,30],[585,37,501,4],[586,0,502,4],[588,0,503,3],[588,13,503,8,"byteLength"],[588,23,503,3],[588,27,503,22,"chunk"],[588,32,503,27],[588,33,503,28,"length"],[588,39,503,3],[589,0,504,3],[589,7,485,2],[591,0,505,2,"BufferWriter"],[591,6,505,2,"BufferWriter"],[591,18,505,14],[591,19,505,15,"prototype"],[591,28,505,2],[591,29,505,25,"result"],[591,35,505,2],[591,38,505,34],[591,50,505,46],[592,0,507,3],[592,12,507,7,"result"],[592,18,507,13],[592,21,507,16,"Buffer"],[592,27,507,22],[592,28,507,23,"alloc"],[592,33,507,16],[592,34,507,29],[592,39,507,34,"byteLength"],[592,49,507,16],[592,50,507,3],[593,0,508,3],[593,12,508,7,"offset"],[593,18,508,13],[593,21,508,16],[593,22,508,3],[595,0,509,3],[595,13,509,8],[595,17,509,12,"i"],[595,18,509,13],[595,21,509,16],[595,22,509,3],[595,24,509,19,"i"],[595,25,509,20],[595,28,509,23],[595,33,509,28,"completeBuffers"],[595,48,509,23],[595,49,509,44,"length"],[595,55,509,3],[595,57,509,52,"i"],[595,58,509,53],[595,60,509,3],[595,62,509,57],[596,0,510,4],[596,14,510,8,"buffer"],[596,20,510,14],[596,23,510,17],[596,28,510,22,"completeBuffers"],[596,43,510,17],[596,44,510,38,"i"],[596,45,510,17],[596,46,510,4],[597,0,511,4,"buffer"],[597,10,511,4,"buffer"],[597,16,511,10],[597,17,511,11,"copy"],[597,21,511,4],[597,22,511,16,"result"],[597,28,511,4],[597,30,511,24,"offset"],[597,36,511,4],[597,38,511,32],[597,39,511,4],[597,41,511,35,"buffer"],[597,47,511,41],[597,48,511,42,"length"],[597,54,511,4],[598,0,512,4,"offset"],[598,10,512,4,"offset"],[598,16,512,10],[598,20,512,14,"buffer"],[598,26,512,20],[598,27,512,21,"length"],[598,33,512,4],[599,0,513,4],[601,0,514,3],[601,12,514,7],[601,17,514,12,"latestBufferOffset"],[601,35,514,3],[601,37,514,32],[602,0,515,4],[602,15,515,9,"latestBuffer"],[602,27,515,4],[602,28,515,22,"copy"],[602,32,515,4],[602,33,515,27,"result"],[602,39,515,4],[602,41,515,35,"offset"],[602,47,515,4],[602,49,515,43],[602,50,515,4],[602,52,515,46],[602,57,515,51,"latestBufferOffset"],[602,75,515,4],[603,0,516,4],[605,0,518,3],[605,12,518,7],[605,17,518,12,"stringFormat"],[605,29,518,3],[605,31,518,26],[605,38,518,33,"result"],[605,44,518,39],[605,45,518,40,"toString"],[605,53,518,33],[605,54,518,49],[605,59,518,54,"stringFormat"],[605,71,518,33],[605,72,518,26],[606,0,519,3],[606,15,519,10,"result"],[606,21,519,3],[607,0,520,3],[607,7,505,2],[609,0,522,2],[609,10,522,6],[609,17,522,13,"Buffer"],[609,23,522,6],[609,28,522,24],[609,38,522,2],[609,40,522,36],[610,0,523,3,"api"],[610,8,523,3,"api"],[610,11,523,6],[610,12,523,7,"addReader"],[610,21,523,3],[610,22,523,17],[610,32,523,27,"data"],[610,36,523,17],[610,38,523,33,"format"],[610,44,523,17],[610,46,523,41],[611,0,524,4],[611,14,524,8,"data"],[611,18,524,12],[611,30,524,24,"Buffer"],[611,36,524,4],[611,38,524,32],[612,0,525,5],[612,19,525,12],[612,23,525,16,"BufferReader"],[612,35,525,12],[612,36,525,29,"data"],[612,40,525,12],[612,41,525,5],[613,0,526,5],[615,0,527,4],[615,14,527,8,"format"],[615,20,527,14],[615,25,527,19],[615,30,527,8],[615,34,527,28,"format"],[615,40,527,34],[615,45,527,39],[615,53,527,4],[615,55,527,49],[616,0,528,5],[616,16,528,9,"buffer"],[616,22,528,15],[616,25,528,18,"Buffer"],[616,31,528,24],[616,32,528,25,"from"],[616,36,528,18],[616,37,528,30,"data"],[616,41,528,18],[616,43,528,36,"format"],[616,49,528,18],[616,50,528,5],[617,0,529,5],[617,19,529,12],[617,23,529,16,"BufferReader"],[617,35,529,12],[617,36,529,29,"buffer"],[617,42,529,12],[617,43,529,5],[618,0,530,5],[619,0,531,4],[619,9,523,3],[620,0,532,3,"api"],[620,8,532,3,"api"],[620,11,532,6],[620,12,532,7,"addWriter"],[620,21,532,3],[620,22,532,17],[620,32,532,27,"format"],[620,38,532,17],[620,40,532,35],[621,0,533,4],[621,14,533,8],[621,15,533,9,"format"],[621,21,533,8],[621,25,533,19,"format"],[621,31,533,25],[621,36,533,30],[621,44,533,4],[621,46,533,40],[622,0,534,5],[622,19,534,12],[622,23,534,16,"BufferWriter"],[622,35,534,12],[622,37,534,5],[623,0,535,5],[623,11,533,4],[623,17,535,11],[623,21,535,15,"format"],[623,27,535,21],[623,32,535,26],[623,37,535,15],[623,41,535,35,"format"],[623,47,535,41],[623,52,535,46],[623,60,535,11],[623,62,535,56],[624,0,536,5],[624,19,536,12],[624,23,536,16,"BufferWriter"],[624,35,536,12],[624,36,536,29,"format"],[624,42,536,12],[624,43,536,5],[625,0,537,5],[626,0,538,4],[626,9,532,3],[627,0,539,3],[629,0,542,2],[629,15,542,11,"HexReader"],[629,24,542,2],[629,25,542,21,"hex"],[629,28,542,2],[629,30,542,26],[630,0,543,3],[630,13,543,8,"hex"],[630,16,543,3],[630,19,543,14,"hex"],[630,22,543,3],[631,0,544,3],[631,13,544,8,"pos"],[631,16,544,3],[631,19,544,14],[631,20,544,3],[632,0,545,3],[634,0,546,2,"HexReader"],[634,6,546,2,"HexReader"],[634,15,546,11],[634,16,546,12,"prototype"],[634,25,546,2],[634,28,546,24,"Object"],[634,34,546,30],[634,35,546,31,"create"],[634,41,546,24],[634,42,546,38,"Reader"],[634,48,546,44],[634,49,546,45,"prototype"],[634,58,546,24],[634,59,546,2],[636,0,547,2,"HexReader"],[636,6,547,2,"HexReader"],[636,15,547,11],[636,16,547,12,"prototype"],[636,25,547,2],[636,26,547,22,"peekByte"],[636,34,547,2],[636,37,547,33],[636,49,547,45],[637,0,548,3],[637,12,548,7,"pair"],[637,16,548,11],[637,19,548,14],[637,24,548,19,"hex"],[637,27,548,14],[637,28,548,23,"substring"],[637,37,548,14],[637,38,548,33],[637,43,548,38,"pos"],[637,46,548,14],[637,48,548,43],[637,49,548,14],[637,50,548,3],[638,0,549,3],[638,15,549,10,"parseInt"],[638,23,549,18],[638,24,549,19,"pair"],[638,28,549,18],[638,30,549,25],[638,32,549,18],[638,33,549,3],[639,0,550,3],[639,7,547,2],[641,0,551,2,"HexReader"],[641,6,551,2,"HexReader"],[641,15,551,11],[641,16,551,12,"prototype"],[641,25,551,2],[641,26,551,22,"readByte"],[641,34,551,2],[641,37,551,33],[641,49,551,45],[642,0,552,3],[642,12,552,7,"pair"],[642,16,552,11],[642,19,552,14],[642,24,552,19,"hex"],[642,27,552,14],[642,28,552,23,"substring"],[642,37,552,14],[642,38,552,33],[642,43,552,38,"pos"],[642,46,552,14],[642,48,552,43],[642,53,552,48,"pos"],[642,56,552,43],[642,59,552,54],[642,60,552,14],[642,61,552,3],[643,0,553,3],[643,13,553,8,"pos"],[643,16,553,3],[643,20,553,15],[643,21,553,3],[644,0,554,3],[644,15,554,10,"parseInt"],[644,23,554,18],[644,24,554,19,"pair"],[644,28,554,18],[644,30,554,25],[644,32,554,18],[644,33,554,3],[645,0,555,3],[645,7,551,2],[647,0,556,2,"HexReader"],[647,6,556,2,"HexReader"],[647,15,556,11],[647,16,556,12,"prototype"],[647,25,556,2],[647,26,556,22,"readChunk"],[647,35,556,2],[647,38,556,34],[647,48,556,44,"length"],[647,54,556,34],[647,56,556,52],[648,0,557,3],[648,12,557,7,"hex"],[648,15,557,10],[648,18,557,13],[648,23,557,18,"hex"],[648,26,557,13],[648,27,557,22,"substring"],[648,36,557,13],[648,37,557,32],[648,42,557,37,"pos"],[648,45,557,13],[648,47,557,42],[648,52,557,47,"pos"],[648,55,557,42],[648,58,557,53,"length"],[648,64,557,59],[648,67,557,60],[648,68,557,13],[648,69,557,3],[649,0,558,3],[649,13,558,8,"pos"],[649,16,558,3],[649,20,558,15,"length"],[649,26,558,21],[649,29,558,22],[649,30,558,3],[650,0,559,3],[650,12,559,7],[650,19,559,14,"Buffer"],[650,25,559,7],[650,30,559,25],[650,40,559,3],[650,42,559,37],[650,49,559,44,"Buffer"],[650,55,559,50],[650,56,559,51,"from"],[650,60,559,44],[650,61,559,56,"hex"],[650,64,559,44],[650,66,559,61],[650,71,559,44],[650,72,559,37],[651,0,560,3],[651,15,560,10],[651,19,560,14,"BinaryHex"],[651,28,560,10],[651,29,560,24,"hex"],[651,32,560,10],[651,33,560,3],[652,0,561,3],[652,7,556,2],[654,0,563,2],[654,15,563,11,"HexWriter"],[654,24,563,2],[654,25,563,21,"finalFormat"],[654,36,563,2],[654,38,563,34],[655,0,564,3],[655,13,564,8,"$hex"],[655,17,564,3],[655,20,564,15],[655,22,564,3],[656,0,565,3],[656,13,565,8,"finalFormat"],[656,24,565,3],[656,27,565,22,"finalFormat"],[656,38,565,33],[656,42,565,37],[656,47,565,3],[657,0,566,3],[659,0,567,2,"HexWriter"],[659,6,567,2,"HexWriter"],[659,15,567,11],[659,16,567,12,"prototype"],[659,25,567,2],[659,28,567,24,"Object"],[659,34,567,30],[659,35,567,31,"create"],[659,41,567,24],[659,42,567,38,"Writer"],[659,48,567,44],[659,49,567,45,"prototype"],[659,58,567,24],[659,59,567,2],[661,0,568,2,"HexWriter"],[661,6,568,2,"HexWriter"],[661,15,568,11],[661,16,568,12,"prototype"],[661,25,568,2],[661,26,568,22,"writeByte"],[661,35,568,2],[661,38,568,34],[661,48,568,44,"value"],[661,53,568,34],[661,55,568,51],[662,0,569,3],[662,12,569,7,"value"],[662,17,569,12],[662,20,569,15],[662,21,569,7],[662,25,569,20,"value"],[662,30,569,25],[662,33,569,28],[662,36,569,3],[662,38,569,33],[662,44,569,39],[662,48,569,43,"Error"],[662,53,569,39],[662,54,569,49],[662,84,569,79,"value"],[662,89,569,39],[662,90,569,33],[663,0,570,3],[663,12,570,7,"hex"],[663,15,570,10],[663,18,570,13,"value"],[663,23,570,18],[663,24,570,19,"toString"],[663,32,570,13],[663,33,570,28],[663,35,570,13],[663,36,570,3],[665,0,571,3],[665,12,571,7,"hex"],[665,15,571,10],[665,16,571,11,"length"],[665,22,571,7],[665,26,571,21],[665,27,571,3],[665,29,571,24],[666,0,572,4,"hex"],[666,10,572,4,"hex"],[666,13,572,7],[666,16,572,10],[666,22,572,16,"hex"],[666,25,572,4],[667,0,573,4],[669,0,574,3],[669,13,574,8,"$hex"],[669,17,574,3],[669,21,574,16,"hex"],[669,24,574,3],[670,0,575,3],[670,7,568,2],[672,0,576,2,"HexWriter"],[672,6,576,2,"HexWriter"],[672,15,576,11],[672,16,576,12,"prototype"],[672,25,576,2],[672,26,576,22,"canWriteBinary"],[672,40,576,2],[672,43,576,39],[672,53,576,49,"chunk"],[672,58,576,39],[672,60,576,56],[673,0,577,3],[673,15,577,10,"chunk"],[673,20,577,15],[673,32,577,27,"BinaryHex"],[673,41,577,10],[673,45,577,41],[673,52,577,48,"Buffer"],[673,58,577,41],[673,63,577,59],[673,73,577,41],[673,77,577,73,"chunk"],[673,82,577,78],[673,94,577,90,"Buffer"],[673,100,577,3],[674,0,578,3],[674,7,576,2],[676,0,579,2,"HexWriter"],[676,6,579,2,"HexWriter"],[676,15,579,11],[676,16,579,12,"prototype"],[676,25,579,2],[676,26,579,22,"writeBinary"],[676,37,579,2],[676,40,579,36],[676,50,579,46,"chunk"],[676,55,579,36],[676,57,579,53,"lengthFunction"],[676,71,579,36],[676,73,579,69],[677,0,580,3],[677,12,580,7,"chunk"],[677,17,580,12],[677,29,580,24,"BinaryHex"],[677,38,580,3],[677,40,580,35],[678,0,581,4,"lengthFunction"],[678,10,581,4,"lengthFunction"],[678,24,581,18],[678,25,581,19,"chunk"],[678,30,581,24],[678,31,581,25,"length"],[678,37,581,19],[678,39,581,18],[678,40,581,4],[679,0,582,4],[679,15,582,9,"$hex"],[679,19,582,4],[679,23,582,17,"chunk"],[679,28,582,22],[679,29,582,23,"$hex"],[679,33,582,4],[680,0,583,4],[680,9,580,3],[680,15,583,10],[680,19,583,14],[680,26,583,21,"Buffer"],[680,32,583,14],[680,37,583,32],[680,47,583,14],[680,51,583,46,"chunk"],[680,56,583,51],[680,68,583,63,"Buffer"],[680,74,583,10],[680,76,583,71],[681,0,584,4,"lengthFunction"],[681,10,584,4,"lengthFunction"],[681,24,584,18],[681,25,584,19,"chunk"],[681,30,584,24],[681,31,584,25,"length"],[681,37,584,18],[681,38,584,4],[682,0,585,4],[682,15,585,9,"$hex"],[682,19,585,4],[682,23,585,17,"chunk"],[682,28,585,22],[682,29,585,23,"toString"],[682,37,585,17],[682,38,585,32],[682,43,585,17],[682,44,585,4],[683,0,586,4],[683,9,583,10],[683,15,586,10],[684,0,587,4],[684,16,587,10],[684,20,587,14,"TypeError"],[684,29,587,10],[684,30,587,24],[684,75,587,10],[684,76,587,4],[685,0,588,4],[686,0,589,3],[686,7,579,2],[688,0,590,2,"HexWriter"],[688,6,590,2,"HexWriter"],[688,15,590,11],[688,16,590,12,"prototype"],[688,25,590,2],[688,26,590,22,"result"],[688,32,590,2],[688,35,590,31],[688,47,590,43],[689,0,591,3],[689,12,591,7],[689,17,591,12,"finalFormat"],[689,28,591,7],[689,33,591,28],[689,41,591,7],[689,45,591,40],[689,52,591,47,"Buffer"],[689,58,591,40],[689,63,591,58],[689,73,591,3],[689,75,591,70],[690,0,592,4],[690,17,592,11,"Buffer"],[690,23,592,17],[690,24,592,18,"from"],[690,28,592,11],[690,29,592,23],[690,34,592,28,"$hex"],[690,38,592,11],[690,40,592,34],[690,45,592,11],[690,46,592,4],[691,0,593,4],[693,0,594,3],[693,15,594,10],[693,19,594,14,"BinaryHex"],[693,28,594,10],[693,29,594,24],[693,34,594,29,"$hex"],[693,38,594,10],[693,40,594,35,"toString"],[693,48,594,10],[693,49,594,44],[693,54,594,49,"finalFormat"],[693,65,594,10],[693,66,594,3],[694,0,595,3],[694,7,590,2],[696,0,596,2,"HexWriter"],[696,6,596,2,"HexWriter"],[696,15,596,11],[696,16,596,12,"prototype"],[696,25,596,2],[696,26,596,22,"writeString"],[696,37,596,2],[696,40,596,36],[696,50,596,46,"string"],[696,56,596,36],[696,58,596,54,"lengthFunction"],[696,72,596,36],[696,74,596,70],[697,0,597,3],[697,12,597,7,"buffer"],[697,18,597,13],[697,21,597,16,"BinaryHex"],[697,30,597,25],[697,31,597,26,"fromUtf8String"],[697,45,597,16],[697,46,597,41,"string"],[697,52,597,16],[697,53,597,3],[698,0,598,3,"lengthFunction"],[698,8,598,3,"lengthFunction"],[698,22,598,17],[698,23,598,18,"buffer"],[698,29,598,24],[698,30,598,25,"length"],[698,36,598,18],[698,38,598,17],[698,39,598,3],[699,0,599,3],[699,13,599,8,"$hex"],[699,17,599,3],[699,21,599,16,"buffer"],[699,27,599,22],[699,28,599,23,"$hex"],[699,32,599,3],[700,0,600,3],[700,7,596,2],[702,0,602,2,"api"],[702,6,602,2,"api"],[702,9,602,5],[702,10,602,6,"addReader"],[702,19,602,2],[702,20,602,16],[702,30,602,26,"data"],[702,34,602,16],[702,36,602,32,"format"],[702,42,602,16],[702,44,602,40],[703,0,603,3],[703,12,603,7,"data"],[703,16,603,11],[703,28,603,23,"BinaryHex"],[703,37,603,7],[703,41,603,36,"data"],[703,45,603,40],[703,46,603,41,"$hex"],[703,50,603,3],[703,52,603,47],[704,0,604,4],[704,17,604,11],[704,21,604,15,"HexReader"],[704,30,604,11],[704,31,604,25,"data"],[704,35,604,29],[704,36,604,30,"$hex"],[704,40,604,11],[704,41,604,4],[705,0,605,4],[707,0,606,3],[707,12,606,7,"format"],[707,18,606,13],[707,23,606,18],[707,28,606,3],[707,30,606,25],[708,0,607,4],[708,17,607,11],[708,21,607,15,"HexReader"],[708,30,607,11],[708,31,607,25,"data"],[708,35,607,11],[708,36,607,4],[709,0,608,4],[710,0,609,3],[710,7,602,2],[711,0,610,2,"api"],[711,6,610,2,"api"],[711,9,610,5],[711,10,610,6,"addWriter"],[711,19,610,2],[711,20,610,16],[711,30,610,26,"format"],[711,36,610,16],[711,38,610,34],[712,0,611,3],[712,12,611,7,"format"],[712,18,611,13],[712,23,611,18],[712,28,611,3],[712,30,611,25],[713,0,612,4],[713,17,612,11],[713,21,612,15,"HexWriter"],[713,30,612,11],[713,32,612,4],[714,0,613,4],[715,0,614,3],[715,7,610,2],[716,0,616,2],[716,13,616,9,"api"],[716,16,616,2],[717,0,617,2],[717,5,10,12],[717,7,10,1],[719,0,619,1,"CBOR"],[719,4,619,1,"CBOR"],[719,8,619,5],[719,9,619,6,"addSemanticEncode"],[719,26,619,1],[719,27,619,24],[719,28,619,1],[719,30,619,27],[719,40,619,37,"data"],[719,44,619,27],[719,46,619,43],[720,0,620,2],[720,10,620,6,"data"],[720,14,620,10],[720,26,620,22,"Date"],[720,30,620,2],[720,32,620,28],[721,0,621,3],[721,15,621,10,"data"],[721,19,621,14],[721,20,621,15,"toISOString"],[721,31,621,10],[721,33,621,3],[722,0,622,3],[723,0,623,2],[723,5,619,1],[723,7,623,4,"addSemanticDecode"],[723,24,619,1],[723,25,623,22],[723,26,619,1],[723,28,623,25],[723,38,623,35,"isoString"],[723,47,623,25],[723,49,623,46],[724,0,624,2],[724,13,624,9],[724,17,624,13,"Date"],[724,21,624,9],[724,22,624,18,"isoString"],[724,31,624,9],[724,32,624,2],[725,0,625,2],[725,5,619,1],[725,7,625,4,"addSemanticDecode"],[725,24,619,1],[725,25,625,22],[725,26,619,1],[725,28,625,25],[725,38,625,35,"isoString"],[725,47,625,25],[725,49,625,46],[726,0,626,2],[726,13,626,9],[726,17,626,13,"Date"],[726,21,626,9],[726,22,626,18,"isoString"],[726,31,626,9],[726,32,626,2],[727,0,627,2],[727,5,619,1],[728,0,629,1],[728,11,629,8,"CBOR"],[728,15,629,1],[729,0,630,1],[729,3,1,0]],"functionMap":{"names":["<global>","<anonymous>","BinaryHex","BinaryHex.prototype.length","BinaryHex.prototype.toString","BinaryHex.fromLatinString","BinaryHex.fromUtf8String","notImplemented","Reader","Reader.prototype.readFloat16","Reader.prototype.readFloat32","Reader.prototype.readFloat64","Reader.prototype.readUint16","Reader.prototype.readUint32","Reader.prototype.readUint64","Writer","Writer.prototype.writeUint16","Writer.prototype.writeUint32","Writer.prototype.writeUint64","Writer.prototype.canWriteBinary","readHeaderRaw","valueFromHeader","writeHeaderRaw","writeHeader","decodeReader","encodeWriter","writer.writeString$argument_1","writer.writeBinary$argument_1","api.addWriter","writerFunctions.push$argument_0","api.addReader","readerFunctions.push$argument_0","api.encode","api.decode","api.addSemanticEncode","api.addSemanticDecode","BufferReader","BufferReader.prototype.peekByte","BufferReader.prototype.readByte","BufferReader.prototype.readUint16","BufferReader.prototype.readUint32","BufferReader.prototype.readFloat32","BufferReader.prototype.readFloat64","BufferReader.prototype.readChunk","BufferWriter","BufferWriter.prototype.writeByte","BufferWriter.prototype.writeFloat32","BufferWriter.prototype.writeFloat64","BufferWriter.prototype.writeString","BufferWriter.prototype.canWriteBinary","BufferWriter.prototype.writeBinary","BufferWriter.prototype.writeBuffer","BufferWriter.prototype.result","api.addReader$argument_0","api.addWriter$argument_0","HexReader","HexReader.prototype.peekByte","HexReader.prototype.readByte","HexReader.prototype.readChunk","HexWriter","HexWriter.prototype.writeByte","HexWriter.prototype.canWriteBinary","HexWriter.prototype.writeBinary","HexWriter.prototype.result","HexWriter.prototype.writeString","CBOR.addSemanticEncode$argument_1","CBOR.addSemanticEncode.addSemanticDecode$argument_1","CBOR.addSemanticEncode.addSemanticDecode.addSemanticDecode$argument_1"],"mappings":"AAA,CC;CDQ,QC;ECE;GDE;WEE;IFE;aGC;IHiB;8BIE;GJQ;6BKC;GLc;uBMK;UNC;IME;GNC;EOE;GPC;gBQK;IRa;gBSC;ITa;gBUC;IVa;eWC;IXE;eYC;IZE;eaC;IbE;EcE;GdC;gBeO;IfG;gBgBC;IhBG;gBiBC;IjBM;mBkBE;IlBE;EmBI;GnBI;EoBE;GpBiB;EqBE;GrBE;EsBE;GtBiB;EuBI;GvBqE;EwBE;6BCkC;KDE;6BEE;KFE;GxBqB;c2BS;0BCE;MDE;I3BI;c6BC;0BCE;MDE;I7BI;W+BC;I/BU;WgCC;IhCS;sBiCC;IjCM;sBkCC;IlCM;EmCM;GnCG;oCoCE;GpCE;oCqCC;GrCE;sCsCC;GtCI;sCuCC;GvCI;uCwCC;GxCI;uCyCC;GzCI;qC0CC;G1CI;E2CE;G3CO;qC4CE;G5CQ;wC6CC;G7CI;wC8CC;G9CI;uC+CC;G/CI;0CgDC;GhDE;uCiDC;GjDG;uCkDC;GlDmB;kCmDC;GnDe;iBoDG;IpDQ;iBqDC;IrDM;EsDI;GtDG;iCuDE;GvDG;iCwDC;GxDI;kCyDC;GzDK;E0DE;G1DG;kC2DE;G3DO;uC4DC;G5DE;oC6DC;G7DU;+B8DC;G9DK;oC+DC;G/DI;gBoDE;GpDO;gBqDC;GrDI;2BgEK;EhEI,uBiE;EjEE,uBkE;ElEE;CDG"}},"type":"js/module"}]}